var atkdef_localzoneid = 65537;var PER_GET_COUNT = 400;var PnlTimeInter = 30;var PnlDisplayFilter = 0;top.virDevId;top.oselsrczone;top.oseldstzone;function OnSystemSummary(){var oRequest = new XmlRequest(XCMP_ACTION_GET, XCMP_GET_ALL);var oModule = oRequest.AddModule("wcn");var oSubModule;var oSubModuleTable;var oRow;if(true == top.CheckPage("I_Interface_summary")){oSubModule = oModule.AddSubModule("interface");oSubModuleTable = oSubModule.AddTable("interface-table",5);oRow = oSubModuleTable.AddRow();oRow.AddField("ifname").AddField("ip-address").AddField("mask").AddField("oper-status").AddField("admin-status").AddField("iftype");if ((true == top.CheckSpec("Vdm")) && (1 != top.WnmGetVID())){var strVid = "0|"+top.WnmGetVID();oRow.AddField("virtualid",null, XCMP_FILTER_EQUAL,strVid);}}oSubModule = oModule.AddSubModule("device-info");oSubModule.AddTable("device-table").AddField("unit-id", 1).AddField("device-name").AddField("product-desc").AddField("serial-number").AddField("h3c-number").AddField("software-version").AddField("hardware-version").AddField("boot-version");oSubModule.AddTable("sys-info-table").AddField("location").AddField("contact").AddField("up-time");oSubModule.AddTable("dev-resource-table").AddField("cpu").AddField("memory").AddField("temperature").AddField("temperature-threshold");oModule = oRequest.AddModule ("stm");oSubModule = oModule.AddSubModule ("device-info");oSubModule.AddTable ("getinfo-table").AddField ("entindex", 1).AddField ("memberid");oSubModule = oModule.AddSubModule ("board-info");oSubModule.AddTable ("getboardinfo-table").AddField ("entindex", 1).AddField ("memberid-board").AddField ("roleid", null, XCMP_FILTER_EQUAL, 2);oModule = oRequest.AddModule("syslog");oSubModule = oModule.AddSubModule("syslog")oSubModule.AddTable("logreport-table",5,XCMP_ACTION_GET).AddField("log-type",null,XCMP_FILTER_EXCLUDE,"ATK_STREAM_ALARM|ATCKDF|ATK_ATTACK_REPORT|BLS_ENTRY_OPERATION|USERLOG_FLOW|USERLOG_NAT").AddField("date").AddField("level").AddField("des");oRequest.AddModule("flowengine").AddSubModule("flowengine").AddTable("cpu-table").AddField("last");if(true == top.CheckSpec("Vdm")){oModule = oRequest.AddModule("session");oSubModule = oModule.AddSubModule("session");oSubModule.AddTable("session-statistics-table").AddField("vfwid",top.WnmGetVID()).AddField("total-num");oSubModule.AddTable("session-statotal-table").AddField("vfwid").AddField("total-stanum");var oZone = oRequest.AddModule("zone").AddSubModule("zone");oZone.AddTable("zone-table").AddField("zonevirdev",top.WnmGetVName()).AddField("zonename");oZone.AddTable("zone-interface-table", XCMP_GET_ALL, XCMP_ACTION_GETMINI).AddField("zonevirdev",top.WnmGetVName());}if(true == CheckSpec("Idi")){oModule = oRequest.AddModule("idi");oSubModule = oModule.AddSubModule("idi");oSubModule.AddTable("info-table").AddField("ips-block").AddField("ips-alert").AddField("url-block").AddField("url-alert").AddField("av-block").AddField("av-alert").AddField("ips-name").AddField("ips-ver").AddField("app-name").AddField("app-ver").AddField("av-name").AddField("av-ver");}if(true == CheckSpec("Iips")){oModule = oRequest.AddModule("iips");oSubModule = oModule.AddSubModule("ips");oSubModule.AddTable("log-stat-table").AddField("block").AddField("alert");}if(true == CheckSpec("Iav")){oModule = oRequest.AddModule("iav");oSubModule = oModule.AddSubModule("av");oSubModule.AddTable("log-stat-table").AddField("block").AddField("alert");}if(true == CheckSpec("Iurl")){oModule = oRequest.AddModule("iurl");oSubModule = oModule.AddSubModule("url");oSubModule.AddTable("log-stat-table").AddField("block").AddField("alert");} oRequest.SendGetRequest("/wcn/sysinfo/summary.x");}function OnIcgSystemSummary(sAnchor){if (sAnchor == null){sAnchor = "";}var oRequest = new XmlRequest(XCMP_ACTION_GET, XCMP_GET_ALL);var oModule = oRequest.AddModule("wcn");var oSubModule;oRequest.AddInfo("<sAnchor>"+sAnchor+"</sAnchor>");oSubModule = oModule.AddSubModule("interface");oSubModule.AddTable("interface-table").AddField("ifname").AddField("ip-address").AddField("mask").AddField("oper-status").AddField("ipcfgmode").AddField("iftype").AddField("ifindex").AddField("admin-status");oSubModule.AddTable("ifxt-table",XCMP_GET_ALL,XCMP_ACTION_GETNEXT).AddField("ifindex").AddField("ifname").AddField("hispeed");oSubModule.AddTable("ethmibstate-table").AddField("ifindex").AddField("duplex");oSubModule = oModule.AddSubModule("ifstat");oSubModule.AddTable("flow-table",XCMP_GET_ALL,XCMP_ACTION_GETNEXT).AddField("ifindex").AddField("interval").AddField("inbits").AddField("outbits").AddField("inpkts").AddField("inbytes");oSubModule = oModule.AddSubModule("device-info");oSubModule.AddTable("device-table").AddField("unit-id", 1).AddField("device-name").AddField("serial-number").AddField("software-version").AddField("hardware-version").AddField("boot-version");oSubModule.AddTable("dev-nodify-scalar-obj-table").AddField("custom-build-info");oSubModule.AddTable("sys-info-table").AddField("up-time");oSubModule.AddTable("dev-resource-table").AddField("cpu").AddField("memory");oModule = oRequest.AddModule("waninter");oSubModule = oModule.AddSubModule("waninter");oSubModule.AddTable("pppoe-client-table").AddField("dialerifindex")  .AddField("ifindex").AddField("action").AddField("dial-bundle-number");oModule = oRequest.AddModule ("stm");oSubModule = oModule.AddSubModule ("device-info");oSubModule.AddTable ("getinfo-table").AddField ("entindex", 1).AddField ("memberid");oSubModule = oModule.AddSubModule ("board-info");oSubModule.AddTable ("getboardinfo-table").AddField ("entindex", 1).AddField ("memberid-board").AddField ("roleid", null, XCMP_FILTER_EQUAL, 2);oModule = oRequest.AddModule("syslog");oSubModule = oModule.AddSubModule("syslog");oSubModule.AddTable("logreport-table",5,XCMP_ACTION_GET).AddField("log-type",null,XCMP_FILTER_EXCLUDE,"STREAM|ATCKDF|BLS|flow|nat").AddField("date").AddField("level").AddField("des");    oModule = oRequest.AddModule("dns");oSubModule = oModule.AddSubModule("dns-dynamic");oSubModule.AddTable("dyn-dns-ip-set-table",XCMP_ACTION_GETNEXT,XCMP_GET_ALL).AddField("server-if-index").AddField("server-ip").AddField("server-if-flag",3); oModule = oRequest.AddModule("fapsummary");oSubModule = oModule.AddSubModule("rdlist");oSubModule.AddTable("rdintfbind-table",XCMP_GET_ALL,XCMP_ACTION_GETNEXT).AddField("svcplcyid").AddField("ifidx").AddField("stacnt");oSubModule.AddTable("serv-plcy-table",XCMP_GET_ALL,XCMP_ACTION_GETNEXT).AddField("sv-id")                  .AddField("ssid-name")              .AddField("row-sts");             var oModule = oRequest.AddModule ("g3modem");oSubModule = oModule.AddSubModule ("modem");oSubModule.AddTable ("modeminfo-table").AddField ("entidx", 0).AddField ("ifindex");oSubModule = oModule.AddSubModule ("uim");oSubModule.AddTable ("uiminfo-table").AddField ("modem-entidx", 0).AddField ("uim-idx", 0).AddField ("status").AddField ("signal");var simple_wlan; if (true == top.CheckSpec("simple_wlan")){simple_wlan = 1;}else{simple_wlan = 0;}oRequest.AddInfo("<simple_wlan>"+ simple_wlan +"</simple_wlan>");oRequest.SendGetRequest("/wcn/sysinfoctc/summaryicg.x");}function OnAclList(sType){var sUrl = "url::/wcn/acl/acl_summary.x";if(sType) sUrl += "?type=" + sType;top.doAction(top.GetCtrlWindow(), sUrl);}function pasedate(date){var date=parseInt(date);if(date<=0){return "00000000";}var i = 8;var mvalue = 0;var arrd=new Array();for(var j=0;j < i;j++){arrd[j]="0";}while(date > 0){mvalue = (date % 16);if(mvalue >= 10){switch(mvalue){case 10:arrd[i-1]="a";break;case 11:arrd[i-1]="b";break;case 12:arrd[i-1]="c";break;case 13:arrd[i-1]="d";break;case 14:arrd[i-1]="e";break;case 15:arrd[i-1]="f";break;}}else{arrd[i-1] =mvalue;}date = parseInt(date/16);--i;}var str="";for(var j=0;j < 8;j++){str+=arrd[j];}return str;}function OnBlackList(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("blacklist").AddSubModule("blacklist");oSubModule.AddTable("blacklist-disp-table",XCMP_GET_ALL,XCMP_ACTION_GETNEXT).AddField("virtualdeviceid",top.WnmGetVID()).AddField("ipaddress").AddField("method").AddField("starttime").AddField("lasttime").AddField("dropcount");oSubModule.AddTable("blacklist-spec-table",1,XCMP_ACTION_ONLYGET).AddField("blslasttime-min").AddField("blslasttime-max").AddField("blslasttime-def");oRequest.SendGetRequest("/wcn/blacklist/blacklist.x");}function OnSessionSummary(){top.select_querykey = null;top.text_ipaddress = null;var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,PER_GET_COUNT);var oSubModule = oRequest.AddModule("session").AddSubModule("session");oSubModule.AddTable("session-list-table").AddField("vfwid",top.WnmGetVID()).AddField("recno").AddField("srcip").AddField("srcport").AddField("destip").AddField("destport").AddField("nat-srcip").AddField("nat-srcport").AddField("nat-destip").AddField("nat-destport").AddField("init-vpn").AddField("reply-vpn").AddField("protocol").AddField("status").AddField("ttl").AddField("init-vrf").AddField("reply-vrf");oRequest.SendGetRequest("/wcn/session/list.x");return false;}function OnWizardSfpStep1(oFromName){    var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);oRequest.AddModule("zone").AddSubModule("zone").AddTable("zone-table").AddField("zonevirdev").AddField("zoneglobalid").AddField("zonename").AddField("zoneshareflg");    oRequest.AddInfo("<name>"+ top.WnmGetVName()+"</name>");oRequest.SendGetRequest("/wcn/wzd_sfp/sfpstep1.x", oFromName);return false;}function OnSessionRelation(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("session").AddSubModule("session");oSubModule.AddTable("session-relation-table").AddField("vfwid",top.WnmGetVID()).AddField("recno").AddField("local-ip").AddField("local-port").AddField("global-ip").AddField("global-port").AddField("protocol").AddField("match-mode").AddField("app").AddField("ttl").AddField("allowconn");oRequest.SendGetRequest("/wcn/session/relation.x");return false;}function OnSessionStatistic(){var oRequest = new XmlRequest(XCMP_ACTION_GET,1);var oSubModule = oRequest.AddModule("session").AddSubModule("session");oSubModule.AddTable("session-statistics-table").AddField("vfwid",top.WnmGetVID()).AddField("total-num").AddField("tcp-num").AddField("tcp-syn-num").AddField("tcp-fin-num").AddField("udp-num").AddField("icmp-num").AddField("rawip-num").AddField("relation-num").AddField("tcp-packets").AddField("udp-packets").AddField("icmp-packets").AddField("rawip-packets").AddField("tcp-bytes").AddField("udp-bytes").AddField("icmp-bytes").AddField("rawip-bytes").AddField("total-rate").AddField("tcp-rate").AddField("udp-rate").AddField("icmp-rate").AddField("rawip-rate");oRequest.SendGetRequest("/wcn/session/statistics.x");return false;}function OnPolicyAlg(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("alg").AddSubModule("alg");oSubModule.AddTable("alg-pro-table").AddField("alg-pro-index").AddField("alg-pro-status").AddField("alg-pro-name");oRequest.SendGetRequest("/wcn/alg/alg.x");return false;}function OnAddrGrp(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("nat").AddSubModule("nat");oSubModule.AddTable("respond-table",XCMP_GET_ALL, XCMP_ACTION_ONLYGET).AddField("respond-get");	oSubModule.AddTable("poolpaf-table",XCMP_GET_ALL, XCMP_ACTION_ONLYGET).AddField("max-index");	oSubModule.AddTable("addressgroup-table").AddField("addressgroup-index").AddField("start-addr").AddField("end-addr").AddField("pool-level");oRequest.SendGetRequest("/wcn/nat/addressgroup_summary.x");return false;}function OnAddrGrpCreate(){var oRequest = new XmlRequest(XCMP_ACTION_GET, 1);var oSubModule    =    oRequest.AddModule("nat").AddSubModule("nat");oSubModule.AddTable("addressgroup-table").AddField("addressgroup-index").AddField("start-addr").AddField("end-addr").AddField("pool-level");oRequest.SendGetRequest("/wcn/nat/addressgroup_add.x");return false;}function OnAddrGrpModify(){var oRequest = new XmlRequest(XCMP_ACTION_GET, 1);var oSubModule    =    oRequest.AddModule("nat").AddSubModule("nat");oSubModule.AddTable("addressgroup-table").AddField("addressgroup-index").AddField("start-addr").AddField("end-addr").AddField("pool-level");oRequest.SendGetRequest("/wcn/nat/addressgroup_modify.x");return false;}function OnNatDnsMapCreate(){var oRequest = new XmlRequest(XCMP_ACTION_GET, 1);var oSubModule    =    oRequest.AddModule("nat").AddSubModule("nat");oSubModule.AddTable("dnsMapServer-table").AddField("dns-domain").AddField("dns-global-address").AddField("dns-global-port").AddField("dns-protocol");oRequest.SendGetRequest("/wcn/nat/natdnsmap_create.x");return false;}function OnNatDnsMapModify(){var oRequest = new XmlRequest(XCMP_ACTION_GET,1);var oSubModule    = oRequest.AddModule("nat").AddSubModule("nat");oSubModule.AddTable("dnsMapServer-table").AddField("dns-domain").AddField("dns-global-address").AddField("dns-global-port").AddField("dns-protocol");oRequest.SendGetRequest("/wcn/nat/natdnsmap_edit.x");return false;}function OnOutboundStatic(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule    = oRequest.AddModule("nat").AddSubModule("nat");oSubModule.AddTable("nat-vrrp-table",XCMP_GET_ALL, XCMP_ACTION_ONLYGET).AddField("nat-vrrp-enble");oSubModule.AddTable("outboundstatic-table").AddField("ifname").AddField("interface").AddField("vrrpid");oRequest.SendGetRequest("/wcn/nat/outboundstatic_summary.x");return false;}function OnOutboundStaticCreate(){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("nat").AddSubModule("nat");oSubModule.AddTable("nat-vrrp-table",XCMP_GET_ALL, XCMP_ACTION_ONLYGET).AddField("nat-vrrp-enble");oSubModule.AddTable("interfaceinfo-table").AddField("interface").AddField("ifname");oRequest.SendGetRequest("/wcn/nat/outboundstatic_create.x");return false;}function OnOutboundStaticModify(){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("nat").AddSubModule("nat");oSubModule.AddTable("nat-vrrp-table",XCMP_GET_ALL, XCMP_ACTION_ONLYGET).AddField("nat-vrrp-enble");oSubModule.AddTable("interfaceinfo-table").AddField("interface");oRequest.SendGetRequest("/wcn/nat/outboundstatic_edit.x");return false;}function OnRequestByZone(pfRequestCB, selectedZoneId){var oPara = new Object();oPara.pfunc = pfRequestCB;oPara.zoneid = selectedZoneId;var oAjax = new AjaxObject();oAjax.SetCallback(OnRequestByZoneCB);var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);oRequest.AddModule("zone").AddSubModule("zone").AddTable("zone-table").AddField("zonevirdev",top.WnmGetVName()).AddField("zoneglobalid").AddField("zonename");oAjax.SendRequest("/wcn/atkdef/zone_list.x?xml="+oRequest.MakeXmlString(),oPara);}function OnRequestByZoneCB(oPara, xmlHttp){top.atkdef_zoneid = [];top.atkdef_zonename = [];try{var aTemp = xmlHttp.responseXML.getElementsByTagName("zoneglobalid");for(var i=0; i<aTemp.length; i++){top.atkdef_zoneid.push({text:aTemp[i].firstChild.nodeValue});}var aTemp = xmlHttp.responseXML.getElementsByTagName("zonename");for(var i=0; i<aTemp.length; i++){top.atkdef_zonename.push({text:aTemp[i].firstChild.nodeValue});}}catch(e){return;}for(var i = 0; i < top.atkdef_zoneid.length; i++){if(oPara.zoneid == top.atkdef_zoneid[i].text){return oPara.pfunc(oPara.zoneid);}}return oPara.pfunc();}function OnSinglePacket(zoneid){var i = 0;if(null == zoneid){for(i = 0; i < top.atkdef_zoneid.length; i++){if(top.atkdef_zoneid[i].text != top.atkdef_localzoneid){zoneid = top.atkdef_zoneid[i].text;break;}}}top.atkdef_selectedZoneId = zoneid;var oRequest = new XmlRequest(XCMP_ACTION_ONLYGET);var oModule = oRequest.AddModule("atkdef");oModule.AddSubModule("singlepacket").AddTable("singlepacket-table").AddField("zoneid",zoneid).AddField("autodroppacket").AddField("fraggle").AddField("land").AddField("winnuke").AddField("tcpflag").AddField("icmpunreachable").AddField("icmpredirect").AddField("tracert").AddField("smurf").AddField("sourceroute").AddField("routerecord").AddField("largeicmp").AddField("maxpacketlen");oModule.AddSubModule("atkspec").AddTable("atkspec-table").AddField("sglpkt-largeicmp-min").AddField("sglpkt-largeicmp-max").AddField("sglpkt-largeicmp-def");oRequest.SendGetRequest("/wcn/singlepacket/singlepacket_summary.x");}function OnIcmpFlood(zoneid){if(null == zoneid && top.atkdef_zoneid.length > 0) zoneid = top.atkdef_zoneid[0].text;top.atkdef_selectedZoneId = zoneid;var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oModule = oRequest.AddModule("atkdef");if(top.atkdef_zoneid.length > 0){oModule.AddSubModule("icmpflood").AddTable("icmpflood-table",XCMP_GET_ALL,XCMP_ACTION_GETNEXT).AddField("zoneid",zoneid).AddField("ipaddress").AddField("lrthreshold").AddField("hlcthreshold");}oModule.AddSubModule("atkspec").AddTable("atkspec-table",1,XCMP_ACTION_ONLYGET).AddField("icmpfld-rate-min").AddField("icmpfld-rate-max").AddField("icmpfld-rate-def");oRequest.SendGetRequest("/wcn/fluxabnormity/icmpflood_summary.x");}function OnUdpFlood(zoneid){if(null == zoneid && top.atkdef_zoneid.length > 0) zoneid = top.atkdef_zoneid[0].text;top.atkdef_selectedZoneId = zoneid;var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oModule = oRequest.AddModule("atkdef");if(top.atkdef_zoneid.length > 0){oModule.AddSubModule("udpflood").AddTable("udpflood-table").AddField("zoneid",zoneid).AddField("ipaddress").AddField("lrthreshold").AddField("hlcthreshold");}oModule.AddSubModule("atkspec").AddTable("atkspec-table").AddField("udpfld-rate-min").AddField("udpfld-rate-max").AddField("udpfld-rate-def");oRequest.SendGetRequest("/wcn/fluxabnormity/udpflood_summary.x");}function OnSynFlood(zoneid){if(null == zoneid && top.atkdef_zoneid.length > 0) zoneid = top.atkdef_zoneid[0].text;top.atkdef_selectedZoneId = zoneid;var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oModule = oRequest.AddModule("atkdef");if(top.atkdef_zoneid.length > 0){oModule.AddSubModule("synflood").AddTable("synflood-table").AddField("zoneid",zoneid).AddField("ipaddress").AddField("lrthreshold").AddField("hlcthreshold");}oModule.AddSubModule("atkspec").AddTable("atkspec-table").AddField("synfld-rate-min").AddField("synfld-rate-max").AddField("synfld-rate-def");oRequest.SendGetRequest("/wcn/fluxabnormity/synflood_summary.x");}function OnLinkLimit(zoneid){if(null == zoneid && top.atkdef_zoneid.length > 0) zoneid = top.atkdef_zoneid[0].text;top.atkdef_selectedZoneId = zoneid;var oRequest = new XmlRequest(XCMP_ACTION_ONLYGET);var oModule = oRequest.AddModule("atkdef");oModule.AddSubModule("linkcountlimit").AddTable("linkcountlimit-table").AddField("zoneid",zoneid).AddField("autodroppacket").AddField("sourceip-enable").AddField("sourceip-threshold").AddField("destinationip-enable").AddField("destinationip-threshold");oModule.AddSubModule("atkspec").AddTable("atkspec-table").AddField("cntlmt-srcip-min").AddField("cntlmt-srcip-max").AddField("cntlmt-srcip-def").AddField("cntlmt-dstip-min").AddField("cntlmt-dstip-max").AddField("cntlmt-dstip-def");oRequest.SendGetRequest("/wcn/fluxabnormity/linkcountlimit_summary.x");}function OnScan(zoneid){var i;if(null == zoneid){for(i = 0; i < top.atkdef_zoneid.length; i++){if(top.atkdef_zoneid[i].text != top.atkdef_localzoneid){zoneid = top.atkdef_zoneid[i].text;break;}}}top.atkdef_selectedZoneId = zoneid;var oRequest = new XmlRequest(XCMP_ACTION_ONLYGET);var oModule = oRequest.AddModule("atkdef");oModule.AddSubModule("scan").AddTable("scan-table").AddField("zoneid",zoneid).AddField("scan-enable").AddField("scan-threshold").AddField("autoaddtoblacklist").AddField("blacklist-lasttime");oModule.AddSubModule("atkspec").AddTable("atkspec-table").AddField("scan-rate-min").AddField("scan-rate-max").AddField("scan-rate-def").AddField("scan-bls-min").AddField("scan-bls-max").AddField("scan-bls-def");oRequest.SendGetRequest("/wcn/fluxabnormity/scan_summary.x");}function OnFluxStatisticConfig(zoneid){if(null == zoneid && top.atkdef_zoneid.length > 0) zoneid = top.atkdef_zoneid[0].text;top.atkdef_selectedZoneId = zoneid;var oRequest = new XmlRequest(XCMP_ACTION_ONLYGET);oRequest.AddModule("atkdef").AddSubModule("fluxstatcfg").AddTable("fluxstatisticcfg-table").AddField("zoneid",zoneid).AddField("sourcezone-enable").AddField("destinationzone-enable").AddField("sourceip-enable").AddField("destinationip-enable")oRequest.SendGetRequest("/wcn/fluxstatistic/fluxstatcfg_summary.x");}function OnFluxStatisticZone(zoneid){if(null == zoneid && top.atkdef_zoneid.length > 0) zoneid = top.atkdef_zoneid[0].text;top.atkdef_selectedZoneId = zoneid;top.atkdef_selectedDirection = null;var oRequest = new XmlRequest(XCMP_ACTION_ONLYGET);oRequest.AddModule("atkdef").AddSubModule("fluxstatzone").AddTable("fluxstatisticzone-table").AddField("zoneid").AddField("direction").AddField("total-linkcount").AddField("total-newlinkrate").AddField("tcp-linkcount").AddField("tcp-halfopen-linkcount").AddField("tcp-halfclose-linkcount").AddField("tcp-newlinkrate").AddField("udp-linkcount").AddField("udp-newlinkrate").AddField("icmp-linkcount").AddField("icmp-newlinkrate").AddField("rawip-linkcount").AddField("rawip-newlinkrate");oRequest.SendGetRequest("/wcn/fluxstatistic/fluxstatzone_summary.x");}function OnFluxStatisticIp(){top.Frame.save("atkdef_selectedvpninstanceid", 0);top.Frame.save("atkdef_selectedvlanid", 0);top.Frame.save("atkdef_selectedvllid", 0);top.Frame.save("atkdef_selectedDirection", 0);top.Frame.save("atkdef_ipaddr", 0);top.Frame.save("atkdef_otxvrf", 1);var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oModule = oRequest.AddModule("atkdef");oModule.AddSubModule("vpninstance").AddTable("vpninstance-table").AddField("vpninstanceid").AddField("vpninstancename");oModule.AddSubModule("vlan").AddTable("vlan-table").AddField("vlan-id");oRequest.AddModule("bridge").AddSubModule("inline").AddTable("bridge-inline-table").AddField("id");oRequest.SendGetRequest("/wcn/fluxstatistic/fluxstatip_summary.x");}function OnTcpProxySetup(){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oModule = oRequest.AddModule("tcpproxy");var oSubModule=oModule.AddSubModule("tcpproxy");oSubModule.AddTable("zoneconf-table",XCMP_GET_ALL,XCMP_ACTION_GETNEXT).AddField("tcpzoneid").AddField("currstate");oSubModule.AddTable("direct-table",1,XCMP_ACTION_ONLYGET).AddField("direct");oRequest.AddModule("zone").AddSubModule("zone").AddTable("zone-table").AddField("zonevirdev",top.WnmGetVName()).AddField("zoneglobalid").AddField("zonename",null,XCMP_FILTER_EXCLUDE,"Local");oRequest.SendGetRequest("/wcn/tcpproxy/setup.x");}function onP2pFileLoad(){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("p2p").AddSubModule("p2p");oSubModule.AddTable("filelist-table",XCMP_GET_ALL,XCMP_ACTION_GETNEXT).AddField("p2pfilelist");oSubModule.AddTable("fileload-table",1,XCMP_ACTION_ONLYGET).AddField("p2pfileload");oSubModule.AddTable("protocal-list-table",XCMP_GET_ALL,XCMP_ACTION_GETNEXT).AddField("p2pprotocolid").AddField("p2pprotocolname").AddField("p2pprotocoldes");oRequest.SendGetRequest("/wcn/p2p/fileload.x");}function onP2pZoneManage(){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);	var oSubModule = oRequest.AddModule("p2p").AddSubModule("p2p");oSubModule.AddTable("p2p-zone-table").AddField("p2pzoneid").AddField("p2penable");oSubModule  = oRequest.AddModule("zone").AddSubModule("zone");oSubModule.AddTable("zone-table").AddField("zonevirdev",top.WnmGetVName()).AddField("zoneglobalid").AddField("zonename",null,XCMP_FILTER_EXCLUDE,"Management");oRequest.SendGetRequest("/wcn/p2p/zonestate.x");}function onP2pProtocal(){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);	var oSubModule = oRequest.AddModule("p2p").AddSubModule("p2p");oSubModule.AddTable("protocal-group-table").AddField("p2pgroupid").AddField("p2pprotocollist");oSubModule.AddTable("protocal-list-table").AddField("p2pprotocolid").AddField("p2pprotocolname");oRequest.SendGetRequest("/wcn/p2p/protocal.x");}function onP2pFluxCount(){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);	var oSubModule = oRequest.AddModule("p2p").AddSubModule("p2p");var oSubTable=oSubModule.AddTable("p2p-count-table");oSubTable.AddField("p2pstatzoneid");oSubTable.AddField("p2pstatprotocolid").AddField("p2ppacketrecieved").AddField("p2pbyterecieved").AddField("p2ppacketsent").AddField("p2pbytesent");oSubModule.AddTable("protocal-list-table").AddField("p2pprotocolid").AddField("p2pprotocolname");oSubModule.AddTable("p2p-zone-table").AddField("p2pzoneid").AddField("p2penable",null,XCMP_FILTER_EQUAL,1);oSubModule  = oRequest.AddModule("zone").AddSubModule("zone");oSubModule.AddTable("zone-table").AddField("zonevirdev",top.WnmGetVName()).AddField("zoneglobalid").AddField("zonename",null,XCMP_FILTER_EXCLUDE,"Management");oRequest.SendGetRequest("/wcn/p2p/count.x");}function OnPolicyOninit(sTarget){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);oRequest.AddModule("aspf").AddSubModule("aspf").AddTable("config-table").AddField("srczoneid",0xFFFFFFFF).AddField("dstzoneid",0xFFFFFFFF).AddField("vfwid",top.WnmGetVID()).AddField("zonechange",3).AddField("icmperr").AddField("tcpnotsyn");oRequest.AddModule("zone").AddSubModule("zone").AddTable("zone-table").AddField("zonevirdev").AddField("zoneglobalid").AddField("zonename").AddField("zoneshareflg")oRequest.SendGetRequest("/wcn/aspf/summary.x");top.g_aspfvar.aspf_oselsrczone = 0xFFFFFFFF;top.g_aspfvar.aspf_oseldstzone = 0xFFFFFFFF;top.g_aspfvar.aspf_srczonename ="All zones";top.g_aspfvar.aspf_dstzonename="All zones";top.g_aspfvar.aspf_zonechange = 3;top.aspf_oselsrczone = 0xFFFFFFFF;top.aspf_srczonename ="All zones";top.aspf_oseldstzone = 0xFFFFFFFF;top.aspf_dstzonename ="All zones";return false;}function OnPolicy(sTarget){if( 4==top.g_aspfvar.aspf_zonechange ){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);oRequest.AddModule("aspf").AddSubModule("aspf").AddTable("config-table",1).AddField("srczoneid",top.g_aspfvar.aspf_oselsrczone).AddField("dstzoneid",top.g_aspfvar.aspf_oseldstzone).AddField("vfwid",top.WnmGetVID()).AddField("zonechange",top.g_aspfvar.aspf_zonechange).AddField("icmperr").AddField("tcpnotsyn");oRequest.AddModule("zone").AddSubModule("zone").AddTable("zone-table").AddField("zonevirdev").AddField("zoneglobalid").AddField("zonename").AddField("zoneshareflg")oRequest.SendGetRequest("/wcn/aspf/summary.x");return false;}else{var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);oRequest.AddModule("aspf").AddSubModule("aspf").AddTable("config-table").AddField("srczoneid",top.g_aspfvar.aspf_oselsrczone).AddField("dstzoneid",top.g_aspfvar.aspf_oseldstzone).AddField("vfwid",top.WnmGetVID()).AddField("zonechange",top.g_aspfvar.aspf_zonechange).AddField("icmperr").AddField("tcpnotsyn");oRequest.AddModule("zone").AddSubModule("zone").AddTable("zone-table").AddField("zonevirdev").AddField("zoneglobalid").AddField("zonename").AddField("zoneshareflg")oRequest.SendGetRequest("/wcn/aspf/summary.x");return false;}}function OnFilterStatisticOninit(sTarget){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);oRequest.AddModule("filter").AddSubModule("filter").AddTable("statistic-table").AddField("srczoneid",0xFFFFFFFF).AddField("dstzoneid",0xFFFFFFFF).AddField("vfwid",top.WnmGetVID()).AddField("zonechange",3).AddField("permitpkt").AddField("denypkt").AddField("starttime").AddField("endtime");oRequest.AddModule("zone").AddSubModule("zone").AddTable("zone-table").AddField("zonevirdev").AddField("zoneglobalid").AddField("zonename").AddField("zoneshareflg")oRequest.SendGetRequest("/wcn/filter/statistic.x");top.g_filtervar.filter_oselsrczone = 0xFFFFFFFF;top.g_filtervar.filter_oseldstzone = 0xFFFFFFFF;top.g_filtervar.filter_zonechange = 3;top.g_filtervar.filter_srczonename ="All zones";top.g_filtervar.filter_dstzonename="All zones";top.filter_oselsrczone = 0xFFFFFFFF;top.filter_srczonename = "All zones";top.filter_oseldstzone = 0xFFFFFFFF;top.filter_dstzonename = "All zones";return false;}function OnFilterStatistic(sTarget){if(4==top.g_filtervar.filter_zonechange){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);oRequest.AddModule("filter").AddSubModule("filter").AddTable("statistic-table",1).AddField("srczoneid",top.g_filtervar.filter_oselsrczone).AddField("dstzoneid",top.g_filtervar.filter_oseldstzone).AddField("vfwid",top.WnmGetVID()).AddField("zonechange",top.g_filtervar.filter_zonechange).AddField("permitpkt").AddField("denypkt").AddField("starttime").AddField("endtime");oRequest.AddModule("zone").AddSubModule("zone").AddTable("zone-table").AddField("zonevirdev").AddField("zoneglobalid").AddField("zonename").AddField("zoneshareflg")oRequest.SendGetRequest("/wcn/filter/statistic.x");return false;}else{var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);oRequest.AddModule("filter").AddSubModule("filter").AddTable("statistic-table").AddField("srczoneid",top.g_filtervar.filter_oselsrczone).AddField("dstzoneid",top.g_filtervar.filter_oseldstzone).AddField("vfwid",top.WnmGetVID()).AddField("zonechange",top.g_filtervar.filter_zonechange).AddField("permitpkt").AddField("denypkt").AddField("starttime").AddField("endtime");oRequest.AddModule("zone").AddSubModule("zone").AddTable("zone-table").AddField("zonevirdev").AddField("zoneglobalid").AddField("zonename").AddField("zoneshareflg");oRequest.SendGetRequest("/wcn/filter/statistic.x");return false;}}function OnAspfModify(oRow){top.srczonename = oRow.cells[0].innerHTML;top.dstzonename = oRow.cells[1].innerHTML;var oRequest = new XmlRequest(XCMP_ACTION_GET);oRequest.AddModule("aspf").AddSubModule("aspf").AddTable("config-table").AddField("srczoneid",oRow.cells[0].getAttribute("id")).AddField("dstzoneid",oRow.cells[1].getAttribute("id")).AddField("vfwid",top.WnmGetVID()).AddField("icmperr").AddField("tcpnotsyn");oRequest.SendGetRequest("/wcn/aspf/modify.x");top.srczoneid = oRow.cells[0].getAttribute("id");top.dstzoneid = oRow.cells[1].getAttribute("id");return false;}function OnAspfCreate(){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);oRequest.AddModule("zone").AddSubModule("zone").AddTable("zone-table").AddField("zonevirdev").AddField("zoneglobalid").AddField("zonename").AddField("zoneshareflg")oRequest.SendGetRequest("/wcn/aspf/create.x");return false;}function OnZoneSumm(iTab){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule    =    oRequest.AddModule("zone").AddSubModule("zone");var oTable = oSubModule.AddTable("zone-table").AddField("zoneglobalid").AddField("zoneid").AddField("zonename").AddField("zonepri").AddField("zoneshareflg");if("Root" == top.WnmGetVName()){oTable.AddField("zonevirdev",null ,XCMP_FILTER_EQUAL ,"--|Root")}else{oTable.AddField("zonevirdev",top.WnmGetVName())}oSubModule.AddTable("zone-ipobj-table",XCMP_GET_ALL, XCMP_ACTION_ONLYGET).AddField("zoneipobjflag");oRequest.AddInfo("<curpage>"+ (iTab?iTab:1) +"</curpage>");oRequest.SendGetRequest("/wcn/zone/summ.x");}function OnVirdevSet(sTarget){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule    =    oRequest.AddModule("virdev").AddSubModule("virdev");oSubModule.AddTable("virdev-table").AddField("virdevid").AddField("virdevname")oRequest.SendGetRequest("/wcn/virdev/setup.x");}function OnVirdevCreate(){var oRequest = new XmlRequest(XCMP_ACTION_GET);var oSubModule    =    oRequest.AddModule("virdev").AddSubModule("virdev");oSubModule.AddTable("virdev-range-table").AddField("virdevidmax")oRequest.SendGetRequest("/wcn/virdev/create.x");}function OnVirdevInterface(iTab){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule    =    oRequest.AddModule("virdev").AddSubModule("virdev");oSubModule.AddTable("virdev-table").AddField("virdevid").AddField("virdevname")oSubModule.AddTable("virdev-interface-table").AddField("virdevifname").AddField("virdevname")oRequest.AddInfo("<curpage>"+ (iTab?iTab:1) +"</curpage> <curvdm>"+ top.WnmGetVName() +"</curvdm>");oRequest.SendGetRequest("/wcn/virdev/interface.x");return false;}function OnVirdevVlan(sTarget){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule    =    oRequest.AddModule("virdev").AddSubModule("virdev");oSubModule.AddTable("virdev-table").AddField("virdevname").AddField("virdevvlan")oRequest.SendGetRequest("/wcn/virdev/vlan.x");}function OnVirdevChange(){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule    =    oRequest.AddModule("virdev").AddSubModule("virdev");oSubModule.AddTable("virdev-table").AddField("virdevid").AddField("virdevname")oRequest.SendGetRequest("/wcn/virdev/change.x");}function onRouteStatic(){top.doAction(top.GetCtrlWindow(), "url::"+"/wcn/route/static.x");}function onRouteRIP(){var oRequest    =  new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule  =  oRequest.AddModule("unidynaroute").AddSubModule("rip");oSubModule.AddTable("rip-table").AddField("ripenable");oSubModule.AddTable("rip-interface-table").AddField("ripintfaddr").AddField("ripintfname").AddField("ripintfversion").AddField("ripintfwork").AddField("ripintfauthtype").AddField("ripintfkeystr").AddField("ripintfkeyid");oSubModule.AddTable("rip-import-table").AddField("ripimport"); oRequest.SendGetRequest("/wcn/rip/rip.x");}function onRouteOSPF(){var oRequest   = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("unidynaroute").AddSubModule("ospf");oSubModule.AddTable("ospf-enable-table",XCMP_GET_ALL, XCMP_ACTION_ONLYGET).AddField("ospfenable").AddField("ospfimportstatic");oSubModule.AddTable("ospf-area-table").AddField("areaid").AddField("areatype").AddField("areaincludingallinf").AddField("areanetworkrange");oSubModule.AddTable("ospf-intf-table").AddField("infipadress").AddField("infadresslessif").AddField("infname").AddField("infhello").AddField("infdead").AddField("infauthtype");oRequest.SendGetRequest("/wcn/ospf/ospf.x");}function onRouteBGP(){var oRequest    =  new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule  =  oRequest.AddModule("unidynaroute").AddSubModule("bgp");oSubModule.AddTable("bgp-table",XCMP_GET_ALL, XCMP_ACTION_ONLYGET).AddField("bgpas");oSubModule.AddTable("bgp-addpeer-table").AddField("bgpaddpeeripaddr").AddField("bgpaddpeeras");oSubModule.AddTable("bgp-import-table",XCMP_GET_ALL, XCMP_ACTION_ONLYGET).AddField("bgpimport");oRequest.SendGetRequest("/wcn/bgp/bgp.x");}function OnP2pmeta(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT, XCMP_GET_ALL);var oSubModule = oRequest.AddModule("p2pmeta").AddSubModule("p2pmeta");oSubModule.AddTable("filelist-table", XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField("file-name");oSubModule.AddTable("protocol-group-table", XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField("protocol-group-id").AddField("protocol-list");oSubModule.AddTable("protocol-table", XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField("protocol-id").AddField("protocol-name");oSubModule.AddTable("fileversion-table", 1, XCMP_ACTION_ONLYGET).AddField("file-version");oSubModule.AddTable("fileload-table", 1, XCMP_ACTION_ONLYGET).AddField("file-load");oRequest.SendGetRequest("/wcn/p2pmeta/p2pmeta.x");}function onUsrDefAppSummary(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT, XCMP_GET_ALL);var oSubModule = oRequest.AddModule("appcontrol").AddSubModule("addedapp");oSubModule.AddTable("adv-app-acl-group-table").AddField("acl-type", 1).AddField("acl-number", 3899).AddField("desc");oSubModule.AddTable("adv-app-acl-rule-table").AddField("acl-type", 1).AddField("acl-number", 3899).AddField("acl-rule-number", 0).AddField("destip").AddField("match-op").AddField("protocol").AddField("lport").AddField("hport");oRequest.SendGetRequest("/wcn/appcontrol/usrdefapp_summary.x");}function OnDhcpRelay(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oModule = oRequest.AddModule("dhcp");var oSubModule;oSubModule = oModule.AddSubModule("dhcpstate");oSubModule.AddTable("get-dhcp-state-table",1,XCMP_ACTION_ONLYGET).AddField("state");oSubModule = oModule.AddSubModule("relay");oSubModule.AddTable("relay-globalcfg-table",1,XCMP_ACTION_ONLYGET).AddField("serverdetect").AddField("refreshenable").AddField("handinterval");oSubModule.AddTable("dhcp-servergroup-table",XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField("group-id").AddField("ip-type").AddField("ip-address");oSubModule.AddTable("relay-ifsum-table",XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField("ifindex").AddField("ifdesc").AddField("relaystate");oRequest.SendGetRequest("/wcn/dhcp/relay.x");}function onStaticDNS(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("dns").AddSubModule("dns-static");oSubModule.AddTable("static-dns-summary-table").AddField("host-name").AddField("host-ip");oRequest.SendGetRequest("/wcn/dns/s_summary.x");}function onStaticDnsModify(oRow){top.HostName = oRow.cells[0].innerHTML;top.HostIp = oRow.cells[1].innerHTML;var oRequest = new XmlRequest(XCMP_ACTION_GET);var oSubModule = oRequest.AddModule("dns").AddSubModule("dns-static");oSubModule.AddTable("static-dns-summary-table").AddField("host-name",top.HostName).AddField("host-ip")oRequest.SendGetRequest("/wcn/dns/s_modify.x");}function onDynamicDns(){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("dns").AddSubModule("dns-dynamic");oSubModule.AddTable("dyn-enable-summary-table",1).AddField("state")if (true == top.CheckSpec("DnsProxy")){oSubModule.AddTable("dnsproxy-table").AddField("action")}oSubModule.AddTable("dyn-dns-ip-summary-table",0).AddField("server-ip")oSubModule.AddTable("dyn-domain-summary-table",0).AddField("domain")oRequest.SendGetRequest("/wcn/dns/d_summary.x");}function OnServiceConfig(){var oAjax = new AjaxObject();oAjax.SetCallback(OnServiceQuery);var oRequest = new XmlRequest(XCMP_ACTION_ONLYGET);if (true == top.CheckSpec("https")){oRequest.AddModule("service").AddSubModule("service").AddTable("httpssslpolicy-table").AddField("modify-policy");}else{oRequest.AddModule("service").AddSubModule("service").AddTable("httpd-table").AddField("action");}oAjax.SendRequest("/wcn/service/summ.x?xml="+oRequest.MakeXmlString(), 0);}function GetNodeText(oNode){var ex;try{return oNode.firstChild.nodeValue;}catch(ex){return "";}}function OnServiceQuery(oForm, xmlHttp){if(null == xmlHttp){alert(top.RS_ERR_INT_TIMEOUT);return false;}if("text/xml" != xmlHttp.getResponseHeader("Content-Type")){document.write(xmlHttp.responseText);return false;}var oRequest   = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("service").AddSubModule("service");if (true == top.CheckSpec("telnet")){oSubModule.AddTable("telnet-table").AddField("action");}if (true == top.CheckSpec("ssh")){oSubModule.AddTable("ssh-table").AddField("action");oSubModule.AddTable("sftp-table").AddField("action");}if (true == top.CheckSpec("ftp")){oSubModule.AddTable("ftp-table").AddField("action");oSubModule.AddTable("ftpacl-table").AddField("modify-acl");}if (true == top.CheckSpec("httpd")){oSubModule.AddTable("httpd-table").AddField("action");oSubModule.AddTable("httpdport-table").AddField("modify-port");oSubModule.AddTable("httpdacl-table").AddField("modify-acl");}if (true == top.CheckSpec("https")){var doc = xmlHttp.responseXML;var xmlpath    = "/ROOT/DYNA/service/service/httpssslpolicy-table/row/modify-policy";var oPolicyName = doc.selectSingleNode(xmlpath);var sPolicyName = GetNodeText(oPolicyName, "ssl_policy_name");oSubModule.AddTable("https-table").AddField("action");oSubModule.AddTable("httpsport-table").AddField("modify-port");oSubModule.AddTable("httpsacl-table").AddField("modify-acl");oSubModule.AddTable("httpssslpolicy-table").AddField("modify-policy");oSubModule.AddTable("httpssslpki-table").AddField("pkimode", "ssl-server-policy-"+sPolicyName).AddField("pkiname");oSubModule  = oRequest.AddModule("security").AddSubModule("pki");oSubModule.AddTable("domain-table").AddField("domain-name").AddField("local-dn");}oRequest.SendGetRequest("/wcn/service/summ.x");}function onStatiinfo(){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("bridge").AddSubModule("inline");oSubModule.AddTable("bridge-summary-table").AddField("sum_recv").AddField("filte-in").AddField("filte-out").AddField("stp_in").AddField("bcast").AddField("mcast").AddField("uncast").AddField("invalid-tag").AddField("deliver").AddField("level2-protocol").AddField("local-mac").AddField("black-mac").AddField("send").AddField("stp-out")oRequest.SendGetRequest("/wcn/inline/stt_summary.x");}function onInLine(){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("bridge").AddSubModule("inline");oSubModule.AddTable("bridge-inline-table").AddField("id").AddField("inline-type").AddField("if-name1").AddField("if-name2")oRequest.SendGetRequest("/wcn/inline/summary.x");}function onMac(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,PER_GET_COUNT);var oSubModule = oRequest.AddModule("mac").AddSubModule("mac-address");oSubModule.AddTable("mac-address-table").AddField("mac-address").AddField("mac-vlanid").AddField("mac-status").AddField("mac-port");var oModule = oRequest.AddModule("wcn").AddSubModule("interface");oModule.AddTable("interface-table",XCMP_GET_ALL,XCMP_ACTION_GETNEXT).AddField("ifname").AddField("ifindex").AddField("iftype");oRequest.SendGetRequest("/wcn/mac/summary.x");return false;}function onMstpRegion(){top.doAction(top.GetCtrlWindow(), "url::"+"/wcn/mstp/region_summary.x");}function onMstpPort(){top.doAction(top.GetCtrlWindow(), "url::"+"/wcn/mstp/port_summary.x");}function onMstpDevice(){top.doAction(top.GetCtrlWindow(), "url::"+"/wcn/mstp/device_summary.x");}function onOnlineUser(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("user").AddSubModule("online-user");oSubModule.AddTable("online-user-table").AddField("online-id").AddField("user-name").AddField("ip-address").AddField("user-type").AddField("login-time").AddField("online-time")oRequest.SendGetRequest("/wcn/online_user/summary.x");}function onGetServerByType(oRequest,oSecondary){var oSubModule = oRequest.AddModule("hwtacacs").AddSubModule("hwtacacs-server");switch(top.tac_servertype)       {case "1":sType = "authorization";break;case "2":sType = "accounting";break;case "0":default:sType = "authentication";break;}if(oSecondary == 0){oSubModule.AddTable("hwtacacs-server-table").AddField("scheme","hwtacacs-system").AddField(sType).AddField("ip-address").AddField("udp-port");}else{oSubModule.AddTable("hwtacacs-server-table").AddField("scheme","hwtacacs-system").AddField(sType).AddField("secondary").AddField("ip-address").AddField("udp-port");}}function onTacacsServerSet(){if(!top.tac_servertype){top.tac_servertype = "0";}var oRequest = new XmlRequest(XCMP_ACTION_GET);onGetServerByType(oRequest,1);oRequest.SendGetRequest("/wcn/hwtacacs/s_setup.x");}function onTacacsParaSet(){var oRequest = new XmlRequest(XCMP_ACTION_GET);var oSubModule = oRequest.AddModule("hwtacacs").AddSubModule("hwtacacs-parameter");oSubModule.AddTable("hwtacacs-rlval-table").AddField("scheme","hwtacacs-system").AddField("realtime-intv");oSubModule.AddTable("hwtacacs-stop-table").AddField("scheme","hwtacacs-system").AddField("buf-enable").AddField("stop-times");oSubModule.AddTable("hwtacacs-timeout-table").AddField("scheme","hwtacacs-system").AddField("timeout-intv");oSubModule.AddTable("hwtacacs-deadtime-table").AddField("scheme","hwtacacs-system").AddField("quiet-intv");oSubModule.AddTable("hwtacacs-domain-table").AddField("scheme","hwtacacs-system").AddField("user-name-format");oSubModule.AddTable("hwtacacs-oct-table").AddField("scheme","hwtacacs-system").AddField("data").AddField("packet");oSubModule.AddTable("nas-ip-table").AddField("scheme","hwtacacs-system").AddField("ip");oRequest.SendGetRequest("/wcn/hwtacacs/p_setup.x");}function OnService(){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule=oRequest.AddModule("object").AddSubModule("service");oSubModule.AddTable("service-table").AddField("object-name").AddField("protocol").AddField("src-port-begin").AddField("src-port-end").AddField("dst-port-begin").AddField("dst-port-end").AddField("type").AddField("message-code").AddField("owner-id",0);oRequest.SendGetRequest("/wcn/object/service.x");}function OnSrvCustom(sTarget){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule=oRequest.AddModule("object").AddSubModule("custom-srv");oSubModule.AddTable("custom-srv-table").AddField("object-name").AddField("protocol").AddField("src-port-begin").AddField("src-port-end").AddField("dst-port-begin").AddField("dst-port-end").AddField("type").AddField("descrip").AddField("refcount").AddField("message-code").AddField("owner-id",top.WnmGetVID());oRequest.SendGetRequest("/wcn/object/srv-custom.x");}function OnSrvCustomModify(oRow){var objname=oRow.cells[0].innerHTML;var oRequest = new XmlRequest(XCMP_ACTION_ONLYGET);var oSubModule = oRequest.AddModule("object").AddSubModule("custom-srv");if(oRow.cells[1].innerHTML.toLowerCase().replace(/ /g,"")=="tcp" || oRow.cells[1].innerHTML.toLowerCase().replace(/ /g,"")=="udp"){oSubModule.AddTable("custom-srv-table").AddField("object-name",oRow.cells[0].innerHTML).AddField("protocol").AddField("src-port-begin").AddField("src-port-end").AddField("dst-port-begin").AddField("dst-port-end").AddField("owner-id",top.WnmGetVID());}else if(oRow.cells[1].innerHTML.toLowerCase().replace(/ /g,"")=="icmp"){oSubModule.AddTable("custom-srv-table").AddField("object-name",oRow.cells[0].innerHTML).AddField("protocol").AddField("type").AddField("message-code").AddField("owner-id",top.WnmGetVID());}else{oSubModule.AddTable("custom-srv-table").AddField("object-name",oRow.cells[0].innerHTML).AddField("protocol").AddField("owner-id",top.WnmGetVID());}oRequest.SendGetRequest("/wcn/object/srv-custom_modify.x");}function OnQosPolicy(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("qos").AddSubModule("qos");oSubModule.AddTable("policy-table").AddField("policyindex").AddField("policyname").AddField("policytype");oSubModule.AddTable("policydetail-table").AddField("pldetailindex").AddField("plclassindex").AddField("plclassname").AddField("plbehaviorname");oRequest.SendGetRequest("/wcn/policy/summary.x");}function OnQosApply(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);oRequest.AddModule("qos").AddSubModule("qos").AddTable("apply-table").AddField("portifindex").AddField("direction").AddField("policyname");oRequest.AddModule("wcn").AddSubModule("interface").AddTable("iftable-table").AddField("ifindex").AddField("ifdesc",null,XCMP_FILTER_INCLUDE,"Ethernet").AddField("iftype");oRequest.SendGetRequest("/wcn/policyport/summary.x");}function OnQoSPortSetup(type){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);top.Frame.save("PolicyPortSupportType", type);oRequest.SendGetRequest("/wcn/policyport/setup_disp.x" );}function OnQosClass(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("qos").AddSubModule("qos");oSubModule.AddTable("classify-table").AddField("classindex").AddField("classname").AddField("classopreator").AddField("classcount").AddField("classtype");oSubModule.AddTable("classifydetail-table").AddField("classdetailindex").AddField("classruleindex").AddField("classrulestrvalue").AddField("classruletype").AddField("classrulevalue").AddField("classrulevalue2");oRequest.SendGetRequest("/wcn/classifier/classifier_summary.x");}function OnInitAddress(sTarget){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("object").AddSubModule("obj-address");oSubModule.AddTable("addr-table").AddField("addr-name").AddField("addr-domain").AddField("addr-comment").AddField("addr-refcount").AddField("addr-type").AddField("addr-iplist").AddField("owner-id",top.WnmGetVID());oRequest.SendGetRequest("/wcn/object/address.x");}function OnInitAddressRange(){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("object").AddSubModule("obj-address");oSubModule.AddTable("addr-table").AddField("addr-name").AddField("addr-comment").AddField("addr-refcount").AddField("addr-type",null,XCMP_FILTER_EQUAL,"6").AddField("addr-iplist").AddField("addr-exclude").AddField("owner-id",top.WnmGetVID());oRequest.SendGetRequest("/wcn/object/addrRange.x");}function OnInitSubNet(){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("object").AddSubModule("obj-address");oSubModule.AddTable("addr-table").AddField("addr-name").AddField("addr-comment").AddField("addr-refcount").AddField("addr-type",null,XCMP_FILTER_EQUAL,"7").AddField("addr-iplist").AddField("addr-mask").AddField("addr-exclude").AddField("owner-id",top.WnmGetVID());oRequest.SendGetRequest("/wcn/object/addrSubnet.x");}function OnInitAddressGroup(sTarget){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("object").AddSubModule("obj-address-group");sTarget = sTarget ? sTarget : "";oSubModule.AddTable("addr-group-table").AddField("addr-group-name").AddField("addr-group-elements").AddField("addr-group-comment").AddField("addr-group-refcount").AddField("owner-id",top.WnmGetVID());oRequest.AddInfo("<jumpBack>"+sTarget+"</jumpBack>");oRequest.SendGetRequest("/wcn/object/addr-group.x");}function OnInitServiceGroup(sTarget){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);sTarget = sTarget ? sTarget : "";oRequest.AddModule("object").AddSubModule("service-group").AddTable("ser-group-table").AddField("service-group-name").AddField("service-group-members").AddField("descrip").AddField("refcount").AddField("owner-id",top.WnmGetVID());oRequest.AddInfo("<jumpBack>"+sTarget+"</jumpBack>");oRequest.SendGetRequest("/wcn/object/servicegroup.x");}function OnAddrAddressObjInit(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("object").AddSubModule("obj-address");oSubModule.AddTable("addr-table").AddField("addr-name").AddField("owner-id",top.WnmGetVID());oRequest.SendGetRequest("/wcn/object/address-add.x");}function OnDhbkVlan(sTarget){               var oRequest = new XmlRequest(XCMP_ACTION_ONLYGET);var oSubModule = oRequest.AddModule("dhbkvlan").AddSubModule("dhbkvlan");oSubModule.AddTable("dhbkvlan-table").AddField("function").AddField("type").AddField("status")oSubModule.AddTable("vlan-table").AddField("vlan"); oRequest.SendGetRequest("/wcn/dhbkvlan/summary.x");                    return false;}function OnLinkGroup(sTarget){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT, XCMP_GET_ALL);var oSubModule = oRequest.AddModule("linkgroup").AddSubModule("linkgroup");oSubModule.AddTable("linkgroupshow-table").AddField("linkgroupnumber").AddField("linkgroupstatus");oRequest.SendGetRequest("/wcn/linkgroup/linkgroup.x");return false;}function OnVrrpIfSummary (){var oRequest = new XmlRequest ( XCMP_ACTION_GETNEXT, XCMP_GET_ALL );var oSubModule = oRequest.AddModule("vrrp").AddSubModule("vrrp-ipv4");oSubModule.AddTable("vrrp-interface-table").AddField("ifindex").AddField("ifdesc").AddField("ip-address").AddField("mask")oRequest.SendGetRequest ( "/wcn/vrrp/vrrp_ifsummary.x" );return true;}function OnInitEntity(sTarget){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("security").AddSubModule("pki");oSubModule.AddTable("entity-table").AddField("entity-name").AddField("common-name").AddField("fqdn").AddField("country").AddField("state").AddField("locality").AddField("organization").AddField("organization-unit").AddField("ip-address");        oRequest.SendGetRequest("/wcn/pki/entity_summary.x");}function OnInitDomain(sTarget){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("security").AddSubModule("pki");oSubModule.AddTable("domain-table").AddField("domain-name").AddField("ca-identifier").AddField("entity-name").AddField("mode");oRequest.SendGetRequest("/wcn/pki/domain_summary.x");}function OnInitCertificate(sTarget){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("security").AddSubModule("pki");oSubModule.AddTable("certificate-table").AddField("domain-name").AddField("distribute")        .AddField("subject").AddField("certificate-type");        oRequest.SendGetRequest("/wcn/pki/certificate_summary.x");}function OnInitCRL(sTarget){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("security").AddSubModule("pki");oSubModule.AddTable("domain-table").AddField("domain-name");oRequest.SendGetRequest("/wcn/pki/crl_summary.x");}function IpsecApplyDisp(){    var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule=oRequest.AddModule("security").AddSubModule("ipsec");oSubModule.AddTable("apply-disp-table").AddField("interface-index").AddField("interface-name").AddField("policy-name").AddField("vdmid",top.WnmGetVID());    oRequest.SendGetRequest("/wcn/ipsec/apply_disp.x");}function IpsecProposalDisp(){    var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule=oRequest.AddModule("security").AddSubModule("ipsec");oSubModule.AddTable("proposal-disp-table").AddField("proposal-name")    .AddField("encap-mode").AddField("ah-auth").AddField("esp-auth").AddField("esp-encry")oRequest.SendGetRequest("/wcn/ipsec/proposal_disp.x");}function IpsecTemplateDisp(){    var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule=oRequest.AddModule("security").AddSubModule("ipsec");oSubModule.AddTable("template-disp-table").AddField("template-name")    .AddField("seq-number").AddField("ike-peer").AddField("ipsec-proposal").AddField("pfs").AddField("acl")oRequest.SendGetRequest("/wcn/ipsec/template_disp.x");}function IpsecPolicyDisp(){    var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule=oRequest.AddModule("security").AddSubModule("ipsec");oSubModule.AddTable("policy-disp-table").AddField("policy-name")    .AddField("seq-number").AddField("template-name").AddField("ike-peer").AddField("ipsec-proposal").AddField("acl")oRequest.SendGetRequest("/wcn/ipsec/policy_disp.x");}function IpsecSaDisp(){    var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,PER_GET_COUNT);var oSubModule=oRequest.AddModule("security").AddSubModule("ipsec");oSubModule.AddTable("ipsecsa-disp-table").AddField("local-addr")    .AddField("remote-addr").AddField("spi").AddField("transform").AddField("auth-algorithm").AddField("encry-algorithm")oRequest.SendGetRequest("/wcn/ipsec/ipsecsa_disp.x");}function IpsecStaticDisp(){    var oRequest = new XmlRequest(XCMP_ACTION_ONLYGET);var oSubModule=oRequest.AddModule("security").AddSubModule("ipsec");oSubModule.AddTable("statistics-disp-table").AddField("insec-num")    .AddField("outsec-num").AddField("insec-bytes").AddField("outsec-bytes").AddField("indrop-num").AddField("outdrop-num").AddField("insec-num")    .AddField("drop-nomem").AddField("drop-nosa").AddField("drop-fullqueue").AddField("drop-badau").AddField("drop-badlen").AddField("drop-replay").AddField("drop-fullqueue").AddField("drop-toobig").AddField("drop-badsa")oRequest.SendGetRequest("/wcn/ipsec/packet_disp.x");}function IkeDpdDisplay (){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);oRequest.AddModule("security").AddSubModule("ike").AddTable("dpd-table").AddField("dpd-name").AddField("interval-time").AddField("time-out");                                                  oRequest.SendGetRequest("/wcn/ike/dpddisp.x");                }function IkePeerDisplay (){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);oRequest.AddModule("security").AddSubModule("ike").AddTable("peer-table").AddField("peer-name").AddField("exchange-mode").AddField("remote-lowaddr").AddField("remote-highaddr").AddField("remote-hostname").AddField("remote-name").AddField("nat-traversal");oRequest.SendGetRequest("/wcn/ike/peerdisp.x");                       }function IkeSaDisplay (){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,PER_GET_COUNT);oRequest.AddModule("security").AddSubModule("ike").AddTable("sa-table").AddField("connection-id").AddField("remote-addr").AddField("flag")         .AddField("domain");                   oRequest.SendGetRequest("/wcn/ike/sadisp.x");                }function IkeGlobalDisplay (){var oRequest = new XmlRequest(XCMP_ACTION_ONLYGET);oRequest.AddModule("security").AddSubModule("ike").AddTable("global-table").AddField("local-name").AddField("keepalive-timer");oRequest.SendGetRequest("/wcn/ike/global.x");}function onVlanSummary(){var sVlanRange =  top.sVlanRange ? top.sVlanRange : "1-4094";top.doAction(top.GetCtrlWindow(), "url::/wcn/vlan/vlan_summary.x?vrange="+sVlanRange+"&dismode="+1+"&filehtml=summaryall");}function onPortSummary(){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("wcn").AddSubModule("interface"); oSubModule.AddTable("interface-table").AddField("ifname").AddField("ifindex").AddField("iftype",null,XCMP_FILTER_NOEQUAL,Iftype.WLAN_BSS) .AddField("ip-mode",null, XCMP_FILTER_EQUAL, 1);oSubModule.AddTable("ifindex-table", XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField("ifindex").AddField("name").AddField("config", null, XCMP_FILTER_EQUAL, "0") oRequest.SendGetRequest("/wcn/vlan/port_list.x");}function OnAjaxRequestForLog(pfRequestCB){var oRequest = new XmlRequest(XCMP_ACTION_ONLYGET);oRequest.AddModule("syslog").AddSubModule("syslog").AddTable("logbuf-table").AddField("buffer-size");top.Frame.Ajax.send("/wcn/device/get.x",oRequest, function(){var xmlHttp = this;var nCount = 0;try{var oNode = xmlHttp.responseXML.selectSingleNode("//row/buffer-size").firstChild;nCount = parseInt(oNode.nodeValue);}catch(e){}pfRequestCB(nCount);});}function OnUserlogFlowSetDisplay(sStauts){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT, XCMP_GET_ALL);var oSubModule1 = oRequest.AddModule("userlog").AddSubModule("userlog");oSubModule1.AddTable("userlog-cfg-table",1, XCMP_ACTION_ONLYGET).AddField("logtype", 2).AddField("version").AddField("srcip").AddField("syslog").AddField("vpnenable").AddField("chassisenable").AddField("slotenable").AddField("ipv6enable");oSubModule1.AddTable("userlogdisp-table").AddField("logtype", null, XCMP_FILTER_EQUAL, 2).AddField("slot").AddField("vpnname").AddField("hostip").AddField("hostipv6").AddField("chassis").AddField("userslot").AddField("hostport").AddField("logssnd").AddField("logsudp").AddField("logsinbuf");oSubModule1.AddTable("userlog-irf-table").AddField("slot").AddField("chassis").AddField("userslot").AddField("bemain");var oSubModule2 = oRequest.AddModule("vpns").AddSubModule("vpn");oSubModule2.AddTable("vpn-table").AddField("vpn-name");top.Frame.save("userlogflow_puckerstatus", sStauts?sStauts:"close");oRequest.SendGetRequest("/wcn/userlog/ulogflowset.x");}function OnUserlogNatSetDisplay(sStauts){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT, XCMP_GET_ALL);var oSubModule1 = oRequest.AddModule("userlog").AddSubModule("userlog");oSubModule1.AddTable("userlog-cfg-table",1, XCMP_ACTION_ONLYGET).AddField("logtype",1).AddField("version").AddField("srcip").AddField("syslog").AddField("chassisenable").AddField("slotenable").AddField("ipv6enable");oSubModule1.AddTable("userlogdisp-table").AddField("logtype",null, XCMP_FILTER_EQUAL, 1).AddField("slot").AddField("vpnname").AddField("hostip").AddField("hostipv6").AddField("chassis").AddField("userslot").AddField("hostport").AddField("logssnd").AddField("logsudp").AddField("logsinbuf");oSubModule1.AddTable("userlog-irf-table").AddField("slot").AddField("chassis").AddField("userslot").AddField("bemain");top.Frame.save("userlognat_puckerstatus", sStauts?sStauts:"close");oRequest.SendGetRequest("/wcn/userlog/ulognatset.x");}function OnSysBufSetDisplay(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT, XCMP_GET_ALL);var oSubModule = oRequest.AddModule("syslog").AddSubModule("syslog");oSubModule.AddTable("loghost-get-table").AddField("index").AddField("sev-ip").AddField("sev-ipv6").AddField("vpn-name").AddField("sev-port");oSubModule.AddTable("loghost-config-get-table", 1, XCMP_ACTION_ONLYGET).AddField("ipv6enable").AddField("vpnenable");oSubModule.AddTable("logbuf-table", 1, XCMP_ACTION_ONLYGET).AddField("buffer-size");oSubModule.AddTable("paf-table", 1, XCMP_ACTION_ONLYGET).AddField("min-buffer").AddField("max-buffer").AddField("default-buffer").AddField("min-port").AddField("max-port").AddField("default-port");var oSubModule2 = oRequest.AddModule("vpns").AddSubModule("vpn");oSubModule2.AddTable("vpn-table").AddField("vpn-name");oRequest.SendGetRequest("/wcn/syslog/logset.x");}function OnSysOpLogDisplay(nCount){var oRequest = new XmlRequest(XCMP_ACTION_GET,nCount);oRequest.AddModule("syslog").AddSubModule("syslog").AddTable("logreport-table").AddField("seq-num").AddField("log-type",null,XCMP_FILTER_EXCLUDE,"STREAM|ATCKDF|BLS|USERLOG_FLOW|USERLOG_NAT").AddField("date").AddField("name").AddField("ip").AddField("from").AddField("level").AddField("des");oRequest.SendGetRequest("/wcn/syslog/syslog.x");}function showFlowLog(sVersion){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);oRequest.AddModule("syslog").AddSubModule("syslog").AddTable("logreport-table").AddField("seq-num").AddField("log-type",null,XCMP_FILTER_INCLUDE,"USERLOG_FLOW").AddField("date").AddField("name").AddField("ip").AddField("from").AddField("level").AddField("des",null,XCMP_FILTER_INCLUDE,["(1017)",null,"(1003)"][sVersion-1]);oRequest.SendGetRequest("/wcn/syslog/flowlogv" + sVersion + ".x");}function OnFlowLogDisplay(){var oRequest = new XmlRequest(XCMP_ACTION_ONLYGET);oRequest.AddModule("userlog").AddSubModule("userlog").AddTable("userlog-cfg-table").AddField("logtype", 2).AddField("version");top.Frame.Ajax.send("/wcn/device/get.x", oRequest, function(){var sVersion = this.responseXML.selectSingleNode("//userlog-cfg-table/row/version").firstChild.nodeValue;showFlowLog(sVersion);});}function OnNatLogDisplay(){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);oRequest.AddModule("syslog").AddSubModule("syslog").AddTable("logreport-table").AddField("seq-num").AddField("log-type",null,XCMP_FILTER_INCLUDE,"USERLOG_NAT").AddField("date").AddField("name").AddField("ip").AddField("from").AddField("level").AddField("des");oRequest.SendGetRequest("/wcn/syslog/natlog.x");}function OnStreamLogDisplay(nCount){var oRequest = new XmlRequest(XCMP_ACTION_GET,nCount);oRequest.AddModule("syslog").AddSubModule("syslog").AddTable("logreport-table").AddField("seq-num").AddField("log-type",null, XCMP_FILTER_INCLUDE, "ATK_STREAM_ALARM").AddField("date").AddField("des");oRequest.SendGetRequest("/wcn/syslog/linklog.x");}function OnAtkdfLogDisplay(nCount){var oRequest = new XmlRequest(XCMP_ACTION_GET,nCount);oRequest.AddModule("syslog").AddSubModule("syslog").AddTable("logreport-table").AddField("seq-num").AddField("log-type",null, XCMP_FILTER_INCLUDE, "ATCKDF|ATK_ATTACK_REPORT").AddField("des");oRequest.SendGetRequest("/wcn/syslog/attlog.x");}function OnBlsLogDisplay(nCount){var oRequest = new XmlRequest(XCMP_ACTION_GET,nCount);oRequest.AddModule("syslog").AddSubModule("syslog").AddTable("logreport-table").AddField("seq-num").AddField("log-type",null, XCMP_FILTER_INCLUDE,"BLS_ENTRY_OPERATION").AddField("date").AddField("des");oRequest.SendGetRequest("/wcn/syslog/blslog.x");}function OnFltPolicyLogDisplay(nCount){var oRequest = new XmlRequest(XCMP_ACTION_GET,nCount);oRequest.AddModule("syslog").AddSubModule("syslog").AddTable("logreport-table").AddField("seq-num").AddField("log-type",null, XCMP_FILTER_INCLUDE, "ZONE_DP_FLT_EXECUTION_TCP_LOG|ZONE_DP_FLT_EXECUTION_UDP_LOG|ZONE_DP_FLT_EXECUTION_ICMP_LOG|ZONE_DP_FLT_EXECUTION_RAWIP_LOG").AddField("des");oRequest.SendGetRequest("/wcn/syslog/fltpolicylog.x");}function OnDialogLogSummaryInit(sTarget){	var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);oRequest.AddModule("sessionlog").AddSubModule("sessionlog").AddTable("config-table").AddField("srczoneid",0xFFFFFFFF).AddField("dstzoneid",0xFFFFFFFF).AddField("zonechange",3).AddField("vfwid",top.WnmGetVID()).AddField("acl");	oRequest.AddModule("zone").AddSubModule("zone").AddTable("zone-table").AddField("zonevirdev").AddField("zoneglobalid").AddField("zonename")							.AddField("zoneshareflg");				    			oRequest.SendGetRequest("/wcn/sessionlog/summary.x");top.g_sessionlogvar.sessionlog_oselsrczone = 0xFFFFFFFF;top.g_sessionlogvar.sessionlog_oseldstzone = 0xFFFFFFFF;top.g_sessionlogvar.sessionlog_srczonename ="All zones";top.g_sessionlogvar.sessionlog_dstzonename="All zones";top.g_sessionlogvar.sessionlog_zonechange = 3;top.sessionlog_oselsrczone = 0xFFFFFFFF;top.sessionlog_srczonename ="All zones";top.sessionlog_oseldstzone = 0xFFFFFFFF;top.sessionlog_dstzonename ="All zones";					return false;}function OnDialogLogSummary(sTarget){	if( 4==top.g_sessionlogvar.sessionlog_zonechange ){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);oRequest.AddModule("sessionlog").AddSubModule("sessionlog").AddTable("config-table",1).AddField("srczoneid",top.g_sessionlogvar.sessionlog_oselsrczone).AddField("dstzoneid",top.g_sessionlogvar.sessionlog_oseldstzone).AddField("zonechange",top.g_sessionlogvar.sessionlog_zonechange)				.AddField("vfwid",top.WnmGetVID())				.AddField("acl");	oRequest.AddModule("zone").AddSubModule("zone").AddTable("zone-table").AddField("zonevirdev").AddField("zoneglobalid").AddField("zonename")							.AddField("zoneshareflg");				    			oRequest.SendGetRequest("/wcn/sessionlog/summary.x");return false;}else			{var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);oRequest.AddModule("sessionlog").AddSubModule("sessionlog").AddTable("config-table").AddField("srczoneid",top.g_sessionlogvar.sessionlog_oselsrczone).AddField("dstzoneid",top.g_sessionlogvar.sessionlog_oseldstzone).AddField("zonechange",top.g_sessionlogvar.sessionlog_zonechange)				.AddField("vfwid",top.WnmGetVID())				.AddField("acl");	oRequest.AddModule("zone").AddSubModule("zone").AddTable("zone-table").AddField("zonevirdev").AddField("zoneglobalid").AddField("zonename")							.AddField("zoneshareflg");			oRequest.SendGetRequest("/wcn/sessionlog/summary.x");return false;}}function OnGlobalLogSummary(){	var oRequest = new XmlRequest(XCMP_ACTION_GET);oRequest.AddModule("sessionlog").AddSubModule("sessionlog").AddTable("global-table").AddField("time").AddField("message").AddField("byte");									oRequest.SendGetRequest("/wcn/sessionlog/global.x");			 			return false;			 			}function OnDialogLogCreate(){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);oRequest.AddModule("zone").AddSubModule("zone").AddTable("zone-table").AddField("zonevirdev").AddField("zoneglobalid").AddField("zonename")							.AddField("zoneshareflg");			oRequest.SendGetRequest("/wcn/sessionlog/create.x");			 			return false;}function OnDialogLogModify(oRow){	top.srczonename = oRow.cells[0].innerHTML;top.dstzonename = oRow.cells[1].innerHTML;var oRequest = new XmlRequest(XCMP_ACTION_GET);oRequest.AddModule("sessionlog").AddSubModule("sessionlog").AddTable("config-table").AddField("srczoneid",oRow.cells[0].getAttribute("id")).AddField("dstzoneid",oRow.cells[1].getAttribute("id")).AddField("acl");	oRequest.SendGetRequest("/wcn/sessionlog/modify.x");			 			top.srczoneid = oRow.cells[0].getAttribute("id");top.dstzoneid = oRow.cells[1].getAttribute("id");return false;			 			}function OnUrpf(zoneid){  if(null == zoneid && top.atkdef_zoneid.length > 0) zoneid = top.atkdef_zoneid[0].text;top.atkdef_selectedZoneId = zoneid;var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);oRequest.AddModule("urpf").AddSubModule("urpf").AddTable("urpf-table",1).AddField("zoneid",zoneid).AddField("urpf").AddField("router").AddField("acl").AddField("approcah");	oRequest.AddModule("zone").AddSubModule("zone").AddTable("zone-table").AddField("zonevirdev").AddField("zoneglobalid").AddField("zonename")							.AddField("zoneshareflg");                          oRequest.SendGetRequest("/wcn/urpf/summary.x");return false;}function OnVirtualReassembly(zoneid){if(null == zoneid && top.atkdef_zoneid.length > 0) zoneid = top.atkdef_zoneid[0].text;top.atkdef_selectedZoneId = zoneid;var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);oRequest.AddModule("reassembly").AddSubModule("reassembly").AddTable("reassembly-table",1).AddField("zoneid",zoneid).AddField("vfr-enable").AddField("reassemblies").AddField("fragments").AddField("timeout").AddField("drop");	oRequest.AddModule("zone").AddSubModule("zone").AddTable("zone-table").AddField("zonevirdev").AddField("zoneglobalid").AddField("zonename")							.AddField("zoneshareflg")						oRequest.SendGetRequest("/wcn/reassembly/summary.x");					return false;}function onMacSettings(){var oRequest = new XmlRequest(XCMP_ACTION_ONLYGET);oRequest.AddModule("mac").AddSubModule("mac-address").AddTable("aging-time-table").AddField("aging-time").AddField("aging-time-def").AddField("aging-time-min").AddField("aging-time-max");oRequest.SendGetRequest("/wcn/mac/settings.x");}function OnDeviceBasic(){var oRequest = new XmlRequest(XCMP_ACTION_ONLYGET);oRequest.AddModule("wcn").AddSubModule("device-info").AddTable("sys-info-table").AddField("sys-name");oRequest.SendGetRequest("/wcn/device/basic.x");}function OnLgusrTimeout(){var oRequest = new XmlRequest(XCMP_ACTION_ONLYGET);oRequest.AddModule("wcn").AddSubModule("web").AddTable("login-timeout-table").AddField("login-timeout").AddField("login-timeout-def").AddField("login-timeout-min").AddField("login-timeout-max");oRequest.SendGetRequest("/wcn/web/lgusr.x");}function OnELabel(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("elabel").AddSubModule("elabel");oSubModule.AddTable("entity-table").AddField("physicalindex").AddField("physicalclass").AddField("physicalname").AddField("physicalserialnum").AddField("mfgdate").AddField("mfgname");oSubModule.AddTable("entityex-table").AddField("physicalindex").AddField("mac").AddField("unitid").AddField("slotid").AddField("subslotid"); return oRequest.SendGetRequest("/wcn/elabel/elabel.x");}function OnFlowDetect(sTarget){						   var oRequest = new XmlRequest(XCMP_ACTION_ONLYGET);oRequest.AddModule("flowdetect").AddSubModule("flowdetect").AddTable("flowdetect-table").AddField("mode");						oRequest.SendGetRequest("/wcn/flowdetect/summary.x");					return false;}function OnPppoeSumm(obj){obj = obj?obj:"summary";var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule    =    oRequest.AddModule("pppoe").AddSubModule("pppoe");oSubModule.AddTable("pppoepacket-table").AddField("sessioninterface").AddField("sessionnumber").AddField("receivepacket").AddField("receivebyte").AddField("receivedroppacket").AddField("sendpacket").AddField("sendbyte").AddField("sendbytedroppacket");oSubModule.AddTable("pppoesummary-table").AddField("summdlrnumber").AddField("summinterface").AddField("summsessionnumber").AddField("clientmac").AddField("servermac").AddField("state");oSubModule=oRequest.AddModule("wcn").AddSubModule("interface");oSubModule.AddTable("interface-table").AddField("ifindex").AddField("ifname");oRequest.AddInfo("<dispObj>"+obj+"</dispObj>");oRequest.SendGetRequest("/wcn/pppoe/summ.x");}function OnPppoeClientSumm(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("wcn").AddSubModule("interface");oSubModule.AddTable("interface-table").AddField("ifname")  .AddField("ifindex")  .AddField("ip-address").AddField("iftype").AddField("admin-status").AddField("ip-mode").AddField("mask").AddField("ipcfgmode").AddField("unnumberedifname");oSubModule = oRequest.AddModule("waninter").AddSubModule("waninter");oSubModule.AddTable("pppoe-client-table").AddField("dialerifindex")  .AddField("ifindex").AddField("action").AddField("dial-bundle-number").AddField("no-hostuniq").AddField("idle-timeout").AddField("queue-length");oSubModule.AddTable("ppp-pap-table").AddField("ifindex")  .AddField("password").AddField("username");oRequest.SendGetRequest("/wcn/pppoe/client.x");}function OnRedirectOninit(srcid,dstid){   if(null==srcid){srcid = "All zones";       }if(null==dstid){dstid = "All zones";       }var nSrcFilter = (("All zones"!=srcid) ? XCMP_FILTER_EQUAL : null);var nDstFilter = (("All zones"!=dstid) ? XCMP_FILTER_EQUAL : null);var Filtersrcid=(("All zones"!=srcid)? srcid:null);var Filterdstid=(("All zones"!=dstid)? dstid:null);var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule =  oRequest.AddModule("redirect").AddSubModule("redirect");oSubModule.AddTable("config-table").AddField("vfwid",top.WnmGetVID()).AddField("srczoneid",null,nSrcFilter,Filtersrcid).AddField("dstzoneid",null,nDstFilter,Filterdstid).AddField("segid").AddField("aclid")                .AddField("flag");oSubModule.AddTable("segrange-table",XCMP_GET_ALL, XCMP_ACTION_ONLYGET).AddField("segidmin")             .AddField("segidmax");oRequest.AddModule("zone").AddSubModule("zone").AddTable("zone-table").AddField("zonevirdev").AddField("zoneglobalid").AddField("zonename").AddField("zoneshareflg");oRequest.AddInfo("<src_zone>"+srcid+"</src_zone> <dst_zone>"+dstid+"</dst_zone> ");                                            oRequest.SendGetRequest("/wcn/redirect/summary.x");return false;}function OnRedirectModify(oRow){top.flag = oRow.GetAttribute("flag");top.srczonename = oRow.GetCellText(1);top.dstzonename = oRow.GetCellText(2);top.segid = oRow.GetCellText(3);top.aclid = oRow.GetCellText(4);top.srczoneid = oRow.GetAttribute("srczoneid");top.dstzoneid = oRow.GetAttribute("dstzoneid");var oRequest = new XmlRequest(XCMP_ACTION_ONLYGET);oRequest.AddModule("redirect").AddSubModule("redirect").AddTable("config-table").AddField("vfwid",top.WnmGetVID()).AddField("srczoneid",oRow.GetAttribute("srczoneid"))				.AddField("dstzoneid",oRow.GetAttribute("dstzoneid")).AddField("flag",oRow.GetAttribute("flag")).AddField("segid").AddField("aclid");oRequest.SendGetRequest("/wcn/redirect/modify.x");return false;}function OnRedirectCreate(){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);oRequest.AddModule("zone").AddSubModule("zone").AddTable("zone-table").AddField("zonevirdev").AddField("zoneglobalid").AddField("zonename").AddField("zoneshareflg");oRequest.SendGetRequest("/wcn/redirect/create.x");return false;}function OnIPSinit(){   var oRequest = new XmlRequest(XCMP_ACTION_ONLYGET);oRequest.AddModule("redirect").AddSubModule("ips").AddTable("ipsconfig-table").AddField("ipsenable").AddField("protoc_type")				.AddField("attack_type");oRequest.SendGetRequest("/wcn/redirect/ips.x");return false;}function OnAntiVirusinit(){   var oRequest = new XmlRequest(XCMP_ACTION_ONLYGET);oRequest.AddModule("redirect").AddSubModule("antivirus").AddTable("antivirusconfig-table").AddField("antivirusenable").AddField("vprotoc_type").AddField("vattack_type");oRequest.SendGetRequest("/wcn/redirect/antivirus.x");return false;}function OnCarlSummary(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("carl").AddSubModule("carl");var oTable = oSubModule.AddTable("carl-table");oTable.AddField("carlnumber").AddField("carl-desc");oRequest.SendGetRequest("/wcn/carl/summ.x");return false;}function OnApplyCarlToIf(type){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("carl").AddSubModule("carl");var oTable = oSubModule.AddTable("carl-apply-table");top.Frame.save("CarlApplyType", type);oTable.AddField("ifindex").AddField("direction").AddField("carlnumber").AddField("cir").AddField("cbs").AddField("ebs").AddField("green").AddField("red");oSubModule = oRequest.AddModule("wcn").AddSubModule("interface");oTable = oSubModule.AddTable("interface-table");oTable.AddField("ifindex").AddField("ifname");oRequest.SendGetRequest("/wcn/carl/applysumm.x");return false;}function OnMrouteSumm(iTab){var oRequest = new XmlRequest(XCMP_ACTION_ONLYGET);var oSubModule    =    oRequest.AddModule("mroute").AddSubModule("mroute");oSubModule.AddTable("mroute-table").AddField("status");oRequest.SendGetRequest("/wcn/mroute/summ.x");}function OnShowMrouteEntry(){var oRequest   = new XmlRequest(XCMP_ACTION_GETNEXT,PER_GET_COUNT);var oSubModule = oRequest.AddModule("mroute").AddSubModule("mroute");oSubModule.AddTable("mentry-table").AddField("group","0.0.0.0").AddField("source","0.0.0.0")              .AddField("iif").AddField("oifs");oRequest.SendGetRequest("/wcn/mroute/entry.x");}function OnIgmpSumm(iTab){var oRequest   = new XmlRequest(XCMP_ACTION_GETNEXT,PER_GET_COUNT);var oSubModule = oRequest.AddModule("gmp").AddSubModule("gmp");oSubModule.AddTable("gmp_ifcfg-table").AddField("ifindex").AddField("interface") .AddField("status").AddField("version");oRequest.SendGetRequest("/wcn/gmp/summ.x");}function OnShowIgmpGroup(iTab){var oRequest   = new XmlRequest(XCMP_ACTION_GETNEXT,PER_GET_COUNT);var oSubModule = oRequest.AddModule("gmp").AddSubModule("gmp");oSubModule.AddTable("gmp_group-table").AddField("ifindex").AddField("group").AddField("interface")              .AddField("uptime").AddField("expire");oRequest.SendGetRequest("/wcn/gmp/group.x");}function OnPimSumm(){var oRequest   = new XmlRequest(XCMP_ACTION_GETNEXT,PER_GET_COUNT);var oSubModule = oRequest.AddModule("pim").AddSubModule("pim");oSubModule.AddTable("pim_show_infcfg-table").AddField("ifindex").AddField("interface").AddField("mode");              oRequest.SendGetRequest("/wcn/pim/pim_summ.x");}function OnPimAdvanced(){var oRequest   = new XmlRequest(XCMP_ACTION_ONLYGET);var oSubModule = oRequest.AddModule("pim").AddSubModule("pim");oSubModule.AddTable("pim-autorp-get-table").AddField("AutoRpStatus").AddField("AutoRpAlias","pim");oSubModule.AddTable("pim-checksum-get-table").AddField("RegChkStatus")   .AddField("RegChkAlias","pim");   oSubModule.AddTable("pim-ssmpolicy-get-table").AddField("SSMPoNum").AddField("SSMPoAlias","pim");           oRequest.SendGetRequest("/wcn/pim/pim_adv.x");}function OnPimShowNbr(){var oRequest   = new XmlRequest(XCMP_ACTION_GETNEXT,PER_GET_COUNT);var oSubModule = oRequest.AddModule("pim").AddSubModule("pim");oSubModule.AddTable("pim-shownbr-table").AddField("interface").AddField("neighbor").AddField("ifname")     .AddField("uptime")              .AddField("expire");  oRequest.SendGetRequest("/wcn/pim/pim_nbr.x");}function OnWaninterRequest(sName){if (top.g_BD_Direct != null ){top.g_BD_Direct.WanDirectID=0;}return Stub_OnWaninterRequest(sName);}function OnCellularRequest(sName){if (top.g_BD_Direct != null ){top.g_BD_Direct.WanDirectID=0;}return Stub_OnCellularRequest(sName);}function OnLanWizardStyle1(){var oRequest = new XmlRequest(XCMP_ACTION_GET, XCMP_GET_ALL);var oModuleIf = oRequest.AddModule("wcn").AddSubModule("interface");oModuleIf.AddTable("interface-table").AddField("ifname")  .AddField("ifindex") .AddField("iftype").AddField("ip-address").AddField("mask"); var oModuleDhcp = oRequest.AddModule("synvlan").AddSubModule("synvlandhcp");oModuleDhcp.AddTable("synvlandhcp-table").AddField("ifindex")  .AddField("dhcpenable") .AddField("minaddress")					                                       .AddField("maxaddress")  .AddField("subnetmask")			.AddField("gateway")  .AddField("dnsservers");	oRequest.SendGetRequest("/wcn/direct/directvlan.x");return false;}function OnDNSServer(){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("dns").AddSubModule("dns-dynamic");oSubModule.AddTable("dyn-dns-ip-summary-table").AddField("server-ip");if (true == top.CheckSpec("DnsProxy")){oSubModule.AddTable("dnsproxy-table").AddField("action");}oRequest.SendGetRequest("/wcn/dns/dns_server.x");return true;}function onDosddos(){var oRequest = new XmlRequest(XCMP_ACTION_GET);var oSubModule = oRequest.AddModule("dosddos").AddSubModule("dosddos"); oSubModule.AddTable("tcp-anti-naptha-table").AddField("enable");oSubModule.AddTable("tcp-syn-cookie-table").AddField("enable");oSubModule.AddTable("ip-unreachables-table").AddField("enable").AddField("unreachables","unreachables");           oRequest.SendPostRequest("/wcn/dosddos/dosddos.x");return true;}function onDispBackup(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oModule = oRequest.AddModule("backuprestore").AddSubModule("backuprestore");oModule.AddTable("backuprestore-part-table").AddField("backuprestore-type-index").AddField("backuprestore-part-index").AddField("backuprestore-part-name");oModule.AddTable("backuprestore-files-table").AddField("backuprestore-type-index").AddField("backuprestore-space-index").AddField("backuprestore-files-index").AddField("backuprestore-files-name").AddField("backuprestore-files-size").AddField("backuprestore-type-status").AddField("backuprestore-type-attrib");oRequest.SendGetRequest("/wcn/backuprestore/backup_restore_disp.x");    return true;}function OnServiceSummary(){var oRequest = new XmlRequest(XCMP_ACTION_GET);var oSubModule = oRequest.AddModule("service").AddSubModule("service");if (true == top.CheckSpec("telnet")){oSubModule.AddTable("telnet-table").AddField("action");}if (true == top.CheckSpec("ftp")){oSubModule.AddTable("ftp-table").AddField("action");}if (true == top.CheckSpec("httpd")){oSubModule.AddTable("httpd-table").AddField("action");oSubModule.AddTable("httpdport-table").AddField("modify-port");}if (true == top.CheckSpec("https")){oSubModule.AddTable("https-table").AddField("action"); oSubModule.AddTable("httpsport-table").AddField("modify-port"); }oRequest.SendGetRequest("/wcn/service/summ.x");return true;}function OnAjaxRequestForLogStyle01(pfRequestCB){var oAjax = new AjaxObject();oAjax.SetCallback(OnAjaxRequestForLogStyle01CB);var oRequest = new XmlRequest(XCMP_ACTION_ONLYGET);oRequest.AddModule("syslog").AddSubModule("syslog").AddTable("logbuf-table").AddField("buffer-size");oAjax.SendRequest(XmlRequest.GET_URL+"?xml="+oRequest.MakeXmlString()+"&uid="+top.WnmGetUID(),pfRequestCB);return true;}function OnAjaxRequestForLogStyle01CB(pfRequestCB, xmlHttp){var nCount = 0;try{var oNode = xmlHttp.responseXML.getElementsByTagName("buffer-size")[0].childNodes[0];nCount = parseInt(oNode.nodeValue);}catch(e){}pfRequestCB(nCount);}function OnSyslogSetDisplay(){var oRequest = new XmlRequest(XCMP_ACTION_ONLYGET, 1);var oSubModule = oRequest.AddModule("syslog").AddSubModule("syslog");oSubModule.AddTable("logbuf-table").AddField("buffer-size");oSubModule.AddTable("paf-table").AddField("min-buffer").AddField("max-buffer").AddField("default-buffer").AddField("min-port").AddField("max-port").AddField("default-port");oRequest.SendGetRequest("/wcn/syslog/newlogset.x");return true;}function OnSyslogListDisplay(nCount){var oRequest = new XmlRequest(XCMP_ACTION_GET, 1);oRequest.AddModule("syslog").AddSubModule("syslog").AddTable("logreport-table").AddField("seq-num").AddField("log-type").AddField("date").AddField("from").AddField("level").AddField("des");oRequest.SendGetRequest("/wcn/syslog/newsyslog.x");return true;}function OnWanInterfaceDis(sName){if (sName == undefined){sName = "";}top.g_BD_Direct = null;OnWaninterRequest(sName);  }function OnCellularDis(sName){if (sName == undefined){sName = "";}top.g_BD_Direct = null;OnCellularRequest(sName);  }function OnTeleWanMainInterfaceDis(){top.g_BD_Direct = null;if (top.g_BD_Direct != null ){top.g_BD_Direct.WanDirectID=0;}var oRequest = new XmlRequest(XCMP_ACTION_GET, XCMP_GET_ALL);var oSubModule = oRequest.AddModule("wcn").AddSubModule("interface");oSubModule.AddTable("entity-table").AddField("index").AddField("vendor-type").AddField("name").AddField("ifindex");oSubModule.AddTable("interface-table").AddField("ifname").AddField("ifindex").AddField("ipcfgmode");oRequest.SendGetRequest("/wcn/waninter/tele_editmain.x");return true;}function OnWanSubInterfaceDis(){top.g_BD_Direct = null;OnWanSubInterRequest();  }function OnWanSubInterRequest(){if (top.g_BD_Direct != null ){top.g_BD_Direct.WanDirectID=0;}return Stub_OnWanSubInterRequest();}function OnGetDhcpEnable(){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("dhcp").AddSubModule("dhcpstate");oSubModule.AddTable("dhcp-state-table",1).AddField("state");oRequest.SendGetRequest("/wcn/dhcp/dhcpenable.x");return true;}function OnPortBandWidthSummary(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT, XCMP_GET_ALL);oRequest.AddModule("portbw").AddSubModule("portbw").AddTable("portbw-table").AddField("ifindex").AddField("bandwidth");oRequest.AddModule("wcn").AddSubModule("interface").AddTable("interface-table").AddField("ifindex").AddField("ifname");oRequest.SendGetRequest("/wcn/portbandwidth/summary_disp.x");return true;}function OnSetSysTime(){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("ntp").AddSubModule("ntp");oSubModule.AddTable("serveraddress-table", XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField("system-ntpaddress");oSubModule.AddTable("efficientip-table", 1).AddField("system-efficinetip");        oSubModule.AddTable("sysdatetime-table", 1).AddField("system-datetime");oRequest.SendGetRequest("/wcn/ntp/ntp.x");return true;}function OnGetDhcpInterface(){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("wcn").AddSubModule("interface");oSubModule.AddTable("iftable-table", XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField("ifindex").AddField("ifdesc").AddField("iftype");                  oModule = oRequest.AddModule("dhcp");oModule.AddSubModule("server").AddTable("dhcp-serverif-table", XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField("if-name-id").AddField("server");oModule.AddSubModule("relay").AddTable("dhcp-relayif-table", XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField("if-name-id").AddField("relay");                 oModule.AddSubModule("client").AddTable("dhcp-clientif-table", XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField("if-name-id").AddField("client");oRequest.SendGetRequest("/wcn/dhcp/dhcpinterface.x");return true;}function OnPortBandWidthSetup(){var oRequest = new XmlRequest(XCMP_ACTION_GET, XCMP_GET_ALL);oRequest.AddModule("wcn").AddSubModule("interface").AddTable("interface-table").AddField("ifindex").AddField("ifname").AddField("iftype");oRequest.SendGetRequest("/wcn/portbandwidth/setup_disp.x");return true;}function OnPortBandWidthSummary(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT, XCMP_GET_ALL);oRequest.AddModule("portbw").AddSubModule("portbw").AddTable("portbw-table").AddField("ifindex").AddField("bandwidth");oRequest.AddModule("wcn").AddSubModule("interface").AddTable("interface-table").AddField("ifindex").AddField("ifname");oRequest.SendGetRequest("/wcn/portbandwidth/summary_disp.x");return true;}function OnPortBandWidthSetup(){var oRequest = new XmlRequest(XCMP_ACTION_GET, XCMP_GET_ALL);oRequest.AddModule("wcn").AddSubModule("interface").AddTable("interface-table").AddField("ifindex").AddField("ifname").AddField("iftype");oRequest.SendGetRequest("/wcn/portbandwidth/setup_disp.x");return true;}function Stub_OnWaninterRequest(sName){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oModuleWcn = oRequest.AddModule("wcn");var oSubModuleWcn = oModuleWcn.AddSubModule("interface");oSubModuleWcn.AddTable("entity-table").AddField("index").AddField("vendor-type").AddField("name").AddField("ifindex");oSubModuleWcn.AddTable("ifindex-table").AddField("ifindex").AddField("phytype",null,XCMP_FILTER_EQUAL,"26"); oSubModuleWcn.AddTable("interface-table").AddField("ifname").AddField("ifindex").AddField("ipcfgmode");var oModuleWan = oRequest.AddModule("waninter");var oSubModuleWan = oModuleWan.AddSubModule("macaddress");oSubModuleWan.AddTable("macclone-table",XCMP_GET_ALL).AddField("ifindex").AddField("mactype").AddField("cfgmac").AddField("devmac").AddField("configure");oRequest.AddInfo("<interfacename>"+sName+"</interfacename>");oRequest.SendGetRequest("/wcn/waninter/waninter.x");return true;}function Stub_OnCellularRequest(sName){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oModuleWcn = oRequest.AddModule("wcn");var oSubModuleWcn = oModuleWcn.AddSubModule("interface");oSubModuleWcn.AddTable("entity-table").AddField("index").AddField("vendor-type").AddField("name").AddField("ifindex");oSubModuleWcn.AddTable("interface-table").AddField("ifname").AddField("ifindex").AddField("ipcfgmode");var oModuleWan = oRequest.AddModule("waninter");var oSubModuleWan = oModuleWan.AddSubModule("macaddress");oSubModuleWan.AddTable("macclone-table",XCMP_GET_ALL).AddField("ifindex").AddField("mactype").AddField("cfgmac").AddField("devmac").AddField("configure");var oModule = oRequest.AddModule ("g3modem");var oSubModule = oModule.AddSubModule ("uim");oSubModule.AddTable ("uiminfo-table").AddField ("modem-entidx", 0).AddField ("uim-idx", 0).AddField ("status").AddField ("signal");oRequest.AddInfo("<interfacename>"+sName+"</interfacename>");oRequest.SendGetRequest("/wcn/modem3g/cellular.x");return true;}function Stub_OnWanSubInterRequest(){var aFilter = [Iftype.DIALER, Iftype.L3ETHERNET, Iftype.L3GE];var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("wcn").AddSubModule("interface");oSubModule.AddTable("entity-table").AddField("index").AddField("vendor-type").AddField("name").AddField("ifindex");oSubModule.AddTable("interface-table").AddField("ifname").AddField("ifindex").AddField("ipcfgmode").AddField("ip-address").AddField("mask").AddField("oper-status").AddField("admin-status").AddField("ip-mode", null, XCMP_FILTER_MORE, 1) .AddField("iftype", null, XCMP_FILTER_EQUAL, aFilter); oSubModule = oRequest.AddModule("waninter").AddSubModule("waninter");oSubModule.AddTable("add-ifalias-table").AddField("ifname").AddField("ifalias");oSubModule.AddTable("pppoe-client-table").AddField("dialerifindex")  .AddField("ifindex").AddField("action").AddField("dial-bundle-number");oRequest.SendGetRequest("/wcn/waninter/wansub.x");return true;}function OnLanWizard(){var oRequest = new XmlRequest(XCMP_ACTION_GET, XCMP_GET_ALL);var oSubModule = oRequest.AddModule("directvlan").AddSubModule("directvlan");oSubModule.AddTable("dhcp-interface-table", XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField("ifindex").AddField("ifname");oSubModule.AddTable("diretcvlan-table", XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField("vlaninterface-index").AddField("vlaninterface-address").AddField("vlaninterface-mask");oSubModule.AddTable("dhcp-enable-table",1).AddField("status");oSubModule.AddTable("directdhcppool-table", 1).AddField("dhcp-poolname", "default-dhcp").AddField("dhcp-ipaddress").AddField("dhcp-mask")    ;oSubModule.AddTable("directdhcpetc-table", 1).AddField("dhcp-poolname", "default-dhcp").AddField("dhcp-gateway").AddField("dhcp-dns");oRequest.SendGetRequest("/wcn/direct/directvlan.x");return false;}function OnBridgeGroupShowGlobal(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("tbridge").AddSubModule("tbridge");oSubModule.AddTable("bridge-table").AddField("bridgegroupid","0");                oRequest.SendGetRequest("/wcn/bridge/bridge_list.x");return true;}function OnBridgeGroupShowIf(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var  oIfModule = oRequest.AddModule("wcn").AddSubModule("interface");var oSubModule = oRequest.AddModule("tbridge").AddSubModule("tbridge");oSubModule.AddTable("groupif_table-table").AddField("bridge_id","0").AddField("interface","0").AddField("vlantrans_en").AddField("ifname");oSubModule.AddTable("bridge-table").AddField("bridgegroupid","0");                oIfModule.AddTable("interface-table").AddField("ifindex").AddField("ip-mode").AddField("iftype").AddField("ifname");var oSubModule2 = oRequest.AddModule("waninter").AddSubModule("waninter");oSubModule2.AddTable("pppoe-client-table").AddField("dialerifindex")  .AddField("ifindex")  .AddField("dial-bundle-number");  oRequest.SendGetRequest("/wcn/bridge/group_if.x");return true;}function OnVlanDhcpList(nVlanId){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oModuleIf = oRequest.AddModule("wcn").AddSubModule("interface");oModuleIf.AddTable("interface-table").AddField("ifname")  .AddField("ifindex") .AddField("iftype").AddField("ip-address").AddField("mask"); var oModuleDhcp = oRequest.AddModule("synvlan").AddSubModule("synvlandhcp");oModuleDhcp.AddTable("synvlandhcp-table").AddField("ifindex")  .AddField("dhcpenable") .AddField("minaddress")					                                       .AddField("maxaddress")  .AddField("subnetmask")			.AddField("gateway")  .AddField("dnsservers")	.AddField("reservedip");  oRequest.AddInfo("<vlanidIfindex>"+nVlanId+"</vlanidIfindex>"); 									          	oRequest.SendGetRequest("/wcn/synvlan/vlan_dhcp_list.x");return true;}function OnPortGroupConfig(){var virdevid = top.WnmGetVID();var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);oRequest.AddModule("hosttraffic").AddSubModule("hosttraffic").AddTable("statobj-table").AddField("virdevid",virdevid)   .AddField("name");oRequest.SendGetRequest("/wcn/hosttraffic/summary.x");return false;}function OnBasicConfig(){var virdevid = top.WnmGetVID();var oRequest = new XmlRequest(XCMP_ACTION_ONLYGET);oRequest.AddModule("hosttraffic").AddSubModule("hosttraffic").AddTable("basicconfig-table").AddField("enable").AddField("inletime")    .AddField("interval").AddField("virdevid",virdevid);oRequest.SendGetRequest("/wcn/hosttraffic/set.x");return false;}function OnCWMPSummary(){var oRequest = new XmlRequest(XCMP_ACTION_GET);var oSubModule = oRequest.AddModule("cwmp").AddSubModule("cwmpsub");oSubModule.AddTable("cwmp-managementsrv-table").AddField("tib-acs-url").AddField("tib-acs-username").AddField("tib-acs-password");return oRequest.SendGetRequest("/wcn/cwmp/cwmp_config.x");}function OngetFileManageSummary(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModuleDevice = oRequest.AddModule("device").AddSubModule("filesystem");oSubModuleDevice.AddTable("device-partition-table").AddField("device-index").AddField("partition-index").AddField("partition-name");var oSubModuleSpace = oRequest.AddModule("backuprestore").AddSubModule("sysfile");oSubModuleSpace.AddTable("partitionentry-table").AddField("flhindex").AddField("flhpartindex").AddField("space").AddField("spacefree");return oRequest.SendGetRequest("/wcn/sysmanage/choicedisk.x");}function OnLicenseSummary(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("license").AddSubModule("license");oSubModule.AddTable("license-table").AddField("sn").AddField("licensekey").AddField("activekey").AddField("apnumber");oSubModule.AddTable("apnumber-table",XCMP_GET_ALL, XCMP_ACTION_ONLYGET).AddField("max").AddField("default").AddField("current");oRequest.SendGetRequest("/wcn/license/license_summary.x");return false;}function OnUserIsolateSummary(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("userisolate").AddSubModule("userisolate");oSubModule.AddTable("userisolate-table").AddField("vlanid").AddField("acmac")oRequest.SendGetRequest("/wcn/userisolate/userisolate_summary.x");return false;}function OnArpDisp(){showContent([[RS_MENU_ARP, RS_MENU_ARP_DESC,  "url::/wcn/arp/arp_disp.x", 1, null,  null]]);}function OnDot1xPortDisp(){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("wcn").AddSubModule("interface");oSubModule.AddTable("interface-table").AddField("ifname",null,XCMP_FILTER_INCLUDE,"Ethernet");return oRequest.SendGetRequest("/wcn/dot1x/port_disp");}function OnApInfo(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("apradio").AddSubModule("apradio");oSubModule.AddTable("ap-tmplt-table").AddField("ap-tmplt-name").AddField("serial-id")    .AddField("ap-id");oSubModule.AddTable("apobj-sts-table").AddField("ap-id").AddField("opera-sts");      oSubModule.AddTable("ap-obj-table").AddField("apobj-id").AddField("ip-addr")     .AddField("ap-tmplt-name")     .AddField("sta-assoc-cnt"); oRequest.SendGetRequest("/wcn/wlansummary/wlan_ap_info.x");return false;}function OnWrrmAntenExchange(){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("radioset").AddSubModule("radioset");oSubModule.AddTable("rd2cfg-table").AddField("ap-name")        .AddField("rd-id")          .AddField("rd-elem-id")     .AddField("supflg")         .AddField("antsel");        oRequest.SendGetRequest("/wcn/wlananten/wlan_anten_type.x");}function OnIdsApMonitor(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("idsapmonitor").AddSubModule("idsapmonitor");oSubModule.AddTable("aptable-table").AddField("apname").AddField("apworkmode").AddField("apdetectenable");oRequest.SendGetRequest("/wcn/wlanids/ids_apmonitor.x");return false;}function OnIdsApMonitorEqui(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("idsapequi").AddSubModule("idsapequi");oSubModule.AddTable("devtable-table").AddField("devtmac").AddField("devvendor").AddField("devtype").AddField("devpermittype").AddField("devmonnum").AddField("devchannel").AddField("devtime").AddField("devssid");oRequest.SendGetRequest("/wcn/wlanids/ids_apmonitorequi.x");    }function OnIdsBlackList(){var oRequest = new XmlRequest(XCMP_ACTION_ONLYGET);var oSubModule = oRequest.AddModule("idsblacklist").AddSubModule("idsblacklist");oSubModule.AddTable("dyblacklist-table").AddField("dyblacklistenable").AddField("dyblacklistlasttime");oSubModule.AddTable("blackvalue-table").AddField("blackminvalue").AddField("blackmaxvalue").AddField("blackdefvalue");oRequest.SendGetRequest("/wcn/wlanids/ids_blacklist.x");}function OnIdsIndetHis(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("idsindethis").AddSubModule("idsindethis");oSubModule.AddTable("histable-table").AddField("atkhisindex").AddField("atkhismac").AddField("atkhistype").AddField("atkhischl").AddField("atkhisrssi").AddField("atkhistime").AddField("atkhisname");oRequest.SendGetRequest("/wcn/wlanids/ids_indethis.x");} function OnIdsIndetSet(){var oRequest = new XmlRequest(XCMP_ACTION_ONLYGET);var oSubModule = oRequest.AddModule("idsindetset").AddSubModule("idsindetset"); oSubModule.AddTable("settable-table").AddField("flooddct").AddField("spoofdct").AddField("weakivdct");oRequest.SendGetRequest("/wcn/wlanids/ids_indetset.x");}function OnIdsIndetSta(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("idsindetsta").AddSubModule("idsindetsta");oSubModule.AddTable("statable-table").AddField("atkstatype").AddField("atkstacur").AddField("atkstahis");oRequest.SendGetRequest("/wcn/wlanids/ids_indetsta.x");}function OnIdsUnlawHis(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("idsunlawhis").AddSubModule("idsunlawhis");oSubModule.AddTable("histable-table").AddField("roghisindex").AddField("roghismac").AddField("roghisvend").AddField("roghistype").AddField("roghistchl").AddField("roghistime").AddField("roghisssid");oRequest.SendGetRequest("/wcn/wlanids/ids_unlawhis.x");}function OnIdsWhiteList(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("idswhitelist").AddSubModule("idswhitelist");oSubModule.AddTable("whitetable-table").AddField("whitemac");oRequest.SendGetRequest("/wcn/wlanids/ids_whitelist.x");}function OnIdsRuleList(){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("wids").AddSubModule("wids");oSubModule.AddTable("mac-list-table").AddField("macaddress").AddField("detectflag");oRequest.SendGetRequest("/wcn/wlanids/ids_rulelist.x");}function OnWRoamClient(){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("wroam").AddSubModule("wroam");oSubModule.AddTable("client-in-table").AddField("clientmac").AddField("bssid").AddField("vlanid").AddField("haiptype").AddField("haip");oSubModule.AddTable("client-out-table").AddField("clientmac").AddField("bssid").AddField("vlanid").AddField("foreignip").AddField("foreignhaiptype");oSubModule.AddTable("wroam-group-table").AddField("groupname","systemgroup").AddField("servicestatus").AddField("sourceiptype").AddField("sourceipaddress").AddField("authmode").AddField("authkey").AddField("sourceip");oRequest.SendGetRequest("/wcn/wlanroam/wroamclient.x");}function OnWmeshPolicy(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("wlanmesh").AddSubModule("wlanmesh");oSubModule.AddTable("wmeshpolicy-disp-table").AddField("policyindex").AddField("policyname");oRequest.SendGetRequest("/wcn/wlanmesh/wmesh_policy.x");}function OnAutoapSet(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("autoap").AddSubModule("autoap");oSubModule.AddTable("autoapen-table",1, XCMP_ACTION_ONLYGET).AddField("autoapensupport");oSubModule.AddTable("apall-table").AddField("apname").AddField("serialid").AddField("model");oSubModule.AddTable("apip-table").AddField("apid").AddField("apname").AddField("ipaddr").AddField("autoapflag");oRequest.SendGetRequest("/wcn/wlanapmanager/autoapdisp.x");return false;}function OnAPGroupManager(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("apgroup").AddSubModule("apgroup");oSubModule.AddTable("aplist-table").AddField("apgroupid").AddField("apgroupdescrip").AddField("aplist");oRequest.SendGetRequest("/wcn/wlanapmanager/apgroupdisp.x");return false;}function OnWlanacbackup(){var oRequest = new XmlRequest(XCMP_ACTION_ONLYGET);var oSubModule = oRequest.AddModule("backupac").AddSubModule("backupac");oSubModule.AddTable("backupacget-table").AddField("ipaddr").AddField("ipv6addr");oSubModule.AddTable("backupgetvalue-table").AddField("enablevalue").AddField("domainid").AddField("domainid_min").AddField("domainid_max").AddField("domainid_def").AddField("hellovalue").AddField("hello_min").AddField("hello_max").AddField("hello_def").AddField("vlanid").AddField("vlanid_min").AddField("vlanid_max").AddField("vlanid_def");oRequest.SendGetRequest("/wcn/wlanadvance/wlanbackupsetdisp.x");return false;}function OnWlanacbackupdisp(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("backupac").AddSubModule("backupac");oSubModule.AddTable("apstatus-table").AddField("apid").AddField("apname").AddField("conntype");oRequest.SendGetRequest("/wcn/wlanadvance/wlanbackupdisp.x");return false;}function OnEapServer(){    var oRequest = new XmlRequest(XCMP_ACTION_GET, XCMP_GET_ALL);var oModule = oRequest.AddModule("security");var oSubModule=oModule.AddSubModule("eapserver");oSubModule.AddTable("eapserver-table", 1).AddField("status").AddField("methodfirst").AddField("methodsecond").AddField("methodthird");oSubModule.AddTable("usepolicy-table", 1).AddField("policy-mode", "ssl-server-policy-"+"eap-policy").AddField("domain-name");oSubModule=oModule.AddSubModule("pki");oSubModule.AddTable("domain-table").AddField("domain-name");oRequest.SendGetRequest("/wcn/eapserver/eapserver.x");}function onPortalSsidBindSummary(){	var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule=oRequest.AddModule("security").AddSubModule("portalbind");oSubModule.AddTable("ssidbinding-set-table").AddField("binding-name")	  .AddField("binding-file");oRequest.SendGetRequest("/wcn/portalbind/portalssidbind_summ.x");}function onLocalPortal(){	var oRequest = new XmlRequest(XCMP_ACTION_GET, XCMP_GET_ALL);var oSubModule;var oModule;oModule = oRequest.AddModule("security");oSubModule=oModule.AddSubModule("localportal");oSubModule.AddTable("localserver-set-table",1).AddField("server-status")	  .AddField("protocol");oSubModule.AddTable("usepolicy-table", 1).AddField("policy-mode", "ssl-server-policy-"+"access-policy").AddField("domain-name");				oSubModule=oModule.AddSubModule("pki");oSubModule.AddTable("domain-table").AddField("domain-name");oRequest.SendGetRequest("/wcn/localportal/localportal.x");}  function OnWmmRadioSummary(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("wmmradio").AddSubModule("wmmradio");oSubModule.AddTable("wmmradio-table").AddField("wmmradio-apname").AddField("wmmradio-radiounit").AddField("wmmradio-radioelement");oSubModule.AddTable("wmmradio-en-table").AddField("wmmradio-radioindex").AddField("wmmradio-wmmenable");oRequest.SendGetRequest("/wcn/wlanqos/wmmradiosummary.x");return false;}function OnWmmClientSummary(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("wmmclient").AddSubModule("wmmclient");oSubModule.AddTable("wmmclient-table").AddField("wmmclient-macaddress").AddField("wmmclient-ssidname").AddField("wmmclient-currapid").AddField("wmmclient-qosmode");oRequest.SendGetRequest("/wcn/wlanqos/wmmclientsummary.x");return false;}function OnWlanstSummary(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("wlanst").AddSubModule("wlanstdisp");oSubModule.AddTable("wlanstdisp-table").AddField("wlanstdisp-st").AddField("wlanstdisp-ssid").AddField("wlanstdisp-sttype").AddField("wlanstdisp-ststatus");oRequest.SendGetRequest("/wcn/wlanst02/wlanstsummary.x");return false;}function OnWlanService(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("serviceinfo").AddSubModule("serviceinfo");oSubModule.AddTable("dispst-table").AddField("stnum").AddField("stname").AddField("security").AddField("status");                  oRequest.SendGetRequest("/wcn/wlansummary/wlanstinfo.x");return false;}function OnCountryCode(){var oRequest = new XmlRequest(XCMP_ACTION_ONLYGET);var oSubModule = oRequest.AddModule("wlanadvance").AddSubModule("wlanadvance");oSubModule.AddTable("countrycode-get-table").AddField("countrycode").AddField("countrycodelock");oRequest.SendGetRequest("/wcn/wlancntycode/countrynumber.x");}function OnWlanApSetup(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT, XCMP_GET_ALL);var oSubModule = oRequest.AddModule("apsetup").AddSubModule("apsetup");oSubModule.AddTable("apsetup-table").AddField("apalias").AddField("apmodel").AddField("softversion");oRequest.SendGetRequest("/wcn/wlanapsetup/wlanapsetup.x");return false;}function OnWlanApModel(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT, XCMP_GET_ALL);var oSubModule = oRequest.AddModule("apmodel").AddSubModule("apmodel");oSubModule.AddTable("apmodel-table").AddField("apid").AddField("apname").AddField("apmodel").AddField("ipaddress");oRequest.SendGetRequest("/wcn/wlanapmodel/wlanapmodel.x");return false;}function OnWlanLoadBalance(){var oRequest = new XmlRequest(XCMP_ACTION_ONLYGET);var oSubModule = oRequest.AddModule("wlanloadbalance").AddSubModule("wlanloadbalance");oSubModule.AddTable("loadblance-get-table").AddField("traffic-enable").AddField("traffic-thres").AddField("traffic-gap").AddField("session-enable").AddField("session-thres").AddField("session-gap");oSubModule.AddTable("loadblance-para-table").AddField("traffic-thres-max").AddField("traffic-thres-min").AddField("traffic-gap-max").AddField("traffic-gap-min").AddField("traffic-gap-def").AddField("session-thres-max").AddField("session-thres-min").AddField("session-gap-max").AddField("session-gap-min").AddField("session-gap-def");oSubModule.AddTable("ap-radio-table", XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField("apid").AddField("radioid").AddField("clientnum");oSubModule.AddTable("ap-obj-table", XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField("apid").AddField("apname");oRequest.SendGetRequest("/wcn/wlanloadbalance/wlanloadbalance.x");return false;}function OnWmeshService(){var oRequest = new XmlRequest(XCMP_ACTION_ONLYGET);var oSubModule = oRequest.AddModule("wlanmeshservice").AddSubModule("wlanmeshservice");oSubModule.AddTable("wmesh-service-para-table").AddField("pflnum-min").AddField("pflnum-max");oSubModule.AddTable("wmesh-service-table", XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField("index").AddField("service").AddField("status");oRequest.SendGetRequest("/wcn/wlanmesh/wmesh_service.x");return false;}function onEngineChange(){if(MRedirect.CheckAndFocus()){return;}var sIP = top.g_sIP;var sUsername = top.g_sUsername;var sPassword = top.g_sPassword;var sLang = "";if("cn" == top.g_LANG){sLang = "1";}else{sLang = "0";    }if ("" == sIP){alert(top.RS_ERR_NOREMOTEIP);return true;}var url = "http://"+sIP+"/wcn/login";    var sU="/A"+UrlEscape(top.g_sUsername)+"/B"+UrlEscape(sPassword)+"/"+top.g_LANG.charAt(0);  sU = url + (sU);MRedirect.OpenWindow(sU);}function OnWlanQosService(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("wlanqos").AddSubModule("wlanqos");oSubModule.AddTable("wlanqos-serv-table").AddField("wlanservid").AddField("ssid").AddField("iftype").AddField("bindid").AddField("essindex");oSubModule.AddTable("wlanqos-pri-table").AddField("ifindex").AddField("qospri");oSubModule.AddTable("wlanqos-trust-table").AddField("ifindex").AddField("trustmode");oSubModule.AddTable("wlanqos-direction-table").AddField("ifindex").AddField("direction").AddField("plcyname");oRequest.SendGetRequest("/wcn/wlanqos/wlan_qos_service.x");}function OnPing6SetDisplay(){   var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("wcn").AddSubModule("interface");oSubModule.AddTable("interface-table").AddField("ifname")  .AddField("iftype");oRequest.SendGetRequest("/wcn/ping6/ping6_setup.x");return true;}function OnPingSetDisplay(){   var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("wcn").AddSubModule("interface");oSubModule.AddTable("interface-table").AddField("ifname")  .AddField("iftype");oRequest.SendGetRequest("/wcn/ping/ping_setup.x");return true;}function OnWebAuthIPSum(){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("authip2").AddSubModule("authip2");oSubModule.AddTable("authip-acl-table").AddField("grouptype","1").AddField("groupindex-acl","2782").AddField("matchorder");oSubModule.AddTable("authip-aclrule-table").AddField("grouptype","1").AddField("groupindex-aclrule","2782").AddField("ruleindex","0").AddField("rule-addr").AddField("rule-wildcard").AddField("action");oRequest.SendGetRequest("/wcn/authip2/authip2.x");return true;}function OnAcsei(){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule1 = oRequest.AddModule("wcn").AddSubModule("interface");oSubModule1.AddTable("interface-table").AddField("ifname").AddField("ifindex").AddField("iftype");oSubModule1.AddTable("iftype-table").AddField("iftype").AddField("issupport", null, XCMP_FILTER_EQUAL, "1") .AddField("iftypename");var oSubModule = oRequest.AddModule("acseic").AddSubModule("acseic");oSubModule.AddTable("acseic-table").AddField("acseistatus").AddField("acseiifname");oSubModule.AddTable("clientid-table").AddField("acseiclientid");oRequest.SendGetRequest("/wcn/acseic/acseic_mod.x");return false;}function OnAcfp(){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);		var oSubModule1 = oRequest.AddModule("wcn").AddSubModule("interface");oSubModule1.AddTable("interface-table").AddField("ifname").AddField("ifindex").AddField("iftype");oSubModule1.AddTable("iftype-table").AddField("iftype").AddField("issupport", null, XCMP_FILTER_EQUAL, "1") .AddField("iftypename");var oSubModule = oRequest.AddModule("acfpc").AddSubModule("acfpc");oSubModule.AddTable("clientconf-table").AddField("acfpcenable").AddField("enableifname");oSubModule.AddTable("clientid-table").AddField("clientid");oSubModule.AddTable("capability-table").AddField("mode");oRequest.SendGetRequest("/wcn/acfpc/acfpc_mod.x");return false;}function OnAcfpPolicy(){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule1 =  oRequest.AddModule("acfpc").AddSubModule("acfpc");oSubModule1.AddTable("policy-table").AddField("policyid").AddField("applystatus").AddField("adminstatus").AddField("priority").AddField("inifindex").AddField("outifindex").AddField("destifindex").AddField("lifetime").AddField("starttime").AddField("endtime").AddField("security").AddField("permanent");				oSubModule1.AddTable("clientconf-table").AddField("acfpcenable").AddField("enableifname");var oSubModule2 =  oRequest.AddModule("rmif").AddSubModule("rmif");oSubModule2.AddTable("snapshot-table").AddField("ifname").AddField("ifindex");oRequest.SendGetRequest("/wcn/acfpc/acfpc_policy.x");return false;}function OnAcfpRule(nPolicyId){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule =  oRequest.AddModule("acfpc").AddSubModule("acfpc");oSubModule.AddTable("rule-table").AddField("policyid",nPolicyId).AddField("ruleid").AddField("applystatus").AddField("operate").AddField("action").AddField("rulelevel").AddField("advanceprotocol").AddField("srcip").AddField("srcipmask").AddField("srcportop").AddField("srcstartport").AddField("srcendport").AddField("dstip").AddField("dstipmask").AddField("dstportop").AddField("dststartport").AddField("dstendport").AddField("srcmac").AddField("dstmac").AddField("startvlan").AddField("endvlan").AddField("rate");oSubModule.AddTable("capability-table").AddField("l2rule")oRequest.AddInfo("<policyId>"+ nPolicyId +"</policyId>");oRequest.SendGetRequest("/wcn/acfpc/acfpc_rule.x");return false;}function OnAcfpServer(){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);oRequest.AddModule("acfpc").AddSubModule("acfpc").AddTable("server-table").AddField("context").AddField("lifetime").AddField("mode");oRequest.SendGetRequest("/wcn/acfpc/acfpc_server.x");return false;}function OnSnmp(){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);oRequest.AddModule("snmpc").AddSubModule("snmpc").AddTable("snmpc-table").AddField("enable").AddField("version").AddField("community").AddField("agentip").AddField("supportversion");oRequest.SendGetRequest("/wcn/snmpc/snmpc_mod.x");return false;}function OnRMIfSummary(){var oRequest = new XmlRequest(XCMP_ACTION_GET, XCMP_GET_ALL);var oSubModule = oRequest.AddModule("rmif").AddSubModule("rmif")oSubModule.AddTable("snapshot-table",XCMP_GET_ALL,XCMP_ACTION_GETNEXT).AddField("ifname").AddField("ifindex").AddField("iflayer").AddField("ifstatus").AddField("ifnum");oSubModule.AddTable("dynamic-table",XCMP_GET_ALL,XCMP_ACTION_GETNEXT).AddField("ifname").AddField("ifindex").AddField("ifstatus");oSubModule.AddTable("status-table",1,XCMP_ACTION_ONLYGET).AddField("rmifstatus");oRequest.SendGetRequest("/wcn/rmif/rmif_summ.x");}function OnRMVDMmember(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT, XCMP_GET_ALL);oRequest.AddModule("rmvdm").AddSubModule("rmvdm").AddTable("virdev-remoteif-table").AddField("virdevifname").AddField("virdeviflayer").AddField("virdevname");oRequest.AddModule("virdev").AddSubModule("virdev").AddTable("virdev-table").AddField("virdevid").AddField("virdevname");oRequest.AddInfo("<curvdm>"+ top.WnmGetVName() +"</curvdm>");oRequest.SendGetRequest("/wcn/rmvdm/vdm_if.x");return false;}function OnRmZoneSumm(){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("zone").AddSubModule("zone");var oTable = oSubModule.AddTable("zone-table").AddField("zoneglobalid").AddField("zoneid").AddField("zonename").AddField("zonepri").AddField("zoneshareflg");if("Root" == top.WnmGetVName()){oTable.AddField("zonevirdev",null ,XCMP_FILTER_EQUAL ,"--|Root")}else{oTable.AddField("zonevirdev",top.WnmGetVName())}oRequest.SendGetRequest("/wcn/rmzone/summ.x");}function OnTCPortAdmin(nIndex,ifnumber,ifindex){if ( nIndex==null )nIndex = 1;var sUrl = "url::/wcn/panelport/PrtDtl";var sPortDetailUrl = sUrl;if (ifnumber && "" != ifnumber){sPortDetailUrl += "?port=" + ifnumber + "&ifindex="+ifindex;}redirectById("I_PPORT_Summary");top.doAction(top.GetCtrlWindow(), sPortDetailUrl);}function OnStormConstrainSum(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT, XCMP_GET_ALL);var oModule = oRequest.AddModule("stormconstrain");var oSubModule = oModule.AddSubModule("portstormconstrain");oSubModule.AddTable("portstormconstrain-table").AddField("stormifindex").AddField("bcunit").AddField("bcmin").AddField("bcmax").AddField("mcunit").AddField("mcmin").AddField("mcmax").AddField("ucunit").AddField("ucmin").AddField("ucmax").AddField("status").AddField("controlmode").AddField("trap").AddField("log");oSubModule  = oModule.AddSubModule("sysstormconstrain");oSubModule.AddTable("sysstormconstrain-table",1,XCMP_ACTION_ONLYGET).AddField("sysinterval");   oSubModule  = oModule.AddSubModule("stormconstrain-support");oSubModule.AddTable("support-table",1,XCMP_ACTION_ONLYGET).AddField("casttype").AddField("porttype").AddField("controltype");        oRequest.AddModule("wcn").AddSubModule("interface").AddTable("interface-table").AddField("ifname").AddField("ifindex");oRequest.SendGetRequest("/wcn/stormconstrain/stormconstrain_sum.x");return false;}function onLoopbackDetect(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT, XCMP_GET_ALL);var oModule = oRequest.AddModule("loopback");var oSubModule = oModule.AddSubModule("portloopback");oSubModule.AddTable("portloopback-table").AddField("loopifindex").AddField("portloopstate").AddField("portloopconstate").AddField("portlooppervlan");oSubModule  = oModule.AddSubModule("vlantype");oSubModule.AddTable("vlan-type-table").AddField("ifindex")   .AddField("vlan-type");   oSubModule  = oModule.AddSubModule("sysloopback");oSubModule.AddTable("sysloopback-table",1,XCMP_ACTION_ONLYGET).AddField("loopbackstate")   .AddField("interval");   var aFilter = [Iftype.L2ETHERNET, Iftype.L2GE, Iftype.L2XGE, Iftype.ONU];oRequest.AddModule("wcn").AddSubModule("interface").AddTable("interface-table").AddField("ifname").AddField("ifindex").AddField("admin-status").AddField("iftype",null,XCMP_FILTER_EQUAL,aFilter);oRequest.SendGetRequest("/wcn/loopbackdetect/loopbackdetection_sum.x");return false;}function onArpAntiEnter(){var oRequest = new XmlRequest(XCMP_ACTION_GET, XCMP_GET_ALL);var oModule=oRequest.AddModule("arp");var oactiveSubModule = oModule.AddSubModule("activeack",1,XCMP_ACTION_GET);oactiveSubModule.AddTable("activeack-table").AddField("status"); var ovalidSubModule = oModule.AddSubModule("validcheck",1,XCMP_ACTION_GET);ovalidSubModule.AddTable("validcheck-table").AddField("status");var oSubModule = oModule.AddSubModule("fixmacchk");oSubModule.AddTable("chkmode-table",1,XCMP_ACTION_GET).AddField("mode"); oSubModule.AddTable("aging-table",1,XCMP_ACTION_GET).AddField("curvalue").AddField("min").AddField("max");oSubModule.AddTable("threshhold-table",1,XCMP_ACTION_GET).AddField("curvalue").AddField("min").AddField("max");	oSubModule.AddTable("mac-table",XCMP_GET_ALL,XCMP_ACTION_GETNEXT).AddField("mac");oRequest.SendGetRequest("/wcn/arp/arp_anti.x");return false;}function onARPManage(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,PER_GET_COUNT);var oSubModule = oRequest.AddModule("arp").AddSubModule("arp");oSubModule.AddTable("arp-table").AddField("ipv4").AddField("mac").AddField("vlanid").AddField("interface-index").AddField("entrytype").AddField("gettype",3).AddField("vrf-name");oSubModule.AddTable("arpvpn-table",1,XCMP_ACTION_ONLYGET).AddField("status");var oModule = oRequest.AddModule("wcn").AddSubModule("interface");oModule.AddTable("interface-table",XCMP_GET_ALL,XCMP_ACTION_GETNEXT).AddField("ifname").AddField("ifindex").AddField("iftype");oModule.AddTable("iftype-table").AddField("iftype").AddField("iftypename");oRequest.SendGetRequest("/wcn/arp/arp_manage.x");return false;}function onArpGraLearn(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("arp").AddSubModule("arp");oSubModule.AddTable("gralearn-table",1, XCMP_ACTION_ONLYGET).AddField("status");oSubModule.AddTable("grasendnotsame-table",1, XCMP_ACTION_ONLYGET).AddField("status");var oModule = oRequest.AddModule("wcn").AddSubModule("interface");oModule.AddTable("interface-table").AddField("ifname").AddField("ifindex").AddField("iftype");oModule.AddTable("iftype-table").AddField("iftype").AddField("iftypename");oRequest.SendGetRequest("/wcn/arp/arp_gratuitous.x");return false;}function onSendGratuitousArp(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("arp").AddSubModule("arpsend");oSubModule.AddTable("arpsend-table").AddField("interface-index").AddField("time");var oModule = oRequest.AddModule("wcn").AddSubModule("interface");oModule.AddTable("interface-table").AddField("ifname").AddField("ifindex").AddField("iftype");oRequest.SendGetRequest("/wcn/arp/arp_send.x");return false;}function onScanArp(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oModule = oRequest.AddModule("wcn").AddSubModule("interface");oModule.AddTable("interface-table").AddField("ifname").AddField("ifindex").AddField("iftype");oModule = oRequest.AddModule("arp").AddSubModule("arpscanfix");oModule.AddTable("arpscan-table",1,XCMP_ACTION_ONLYGET).AddField("scan-isstart").AddField("interface-index").AddField("startip").AddField("endip").AddField("scan-type");oRequest.SendGetRequest("/wcn/arp/arp_scan.x");return false;}function onFixedArp(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,PER_GET_COUNT);var oSubModule = oRequest.AddModule("arp").AddSubModule("arp");oSubModule.AddTable("arp-table").AddField("ipv4").AddField("mac").AddField("vlanid").AddField("interface-index").AddField("entrytype").AddField("gettype",3)                   .AddField("vrf-name");oSubModule.AddTable("arpvpn-table",1,XCMP_ACTION_ONLYGET).AddField("status");var oModule = oRequest.AddModule("wcn").AddSubModule("interface");oModule.AddTable("interface-table",XCMP_GET_ALL,XCMP_ACTION_GETNEXT).AddField("ifname").AddField("ifindex").AddField("iftype");oRequest.SendGetRequest("/wcn/arp/arp_fixed.x");return false;}function OnPortSec(){var oRequest = new XmlRequest(XCMP_ACTION_GET, XCMP_GET_ALL);var oSubModule = oRequest.AddModule("security").AddSubModule("portsec");oSubModule.AddTable("portsec-table", 1, XCMP_ACTION_ONLYGET).AddField("status").AddField("trap-value");oSubModule.AddTable("portsec-para-table", 1, XCMP_ACTION_ONLYGET).AddField("disable-timer");oSubModule.AddTable("PortCfgTable-table", XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField("Index").AddField("Interface").AddField("PortMode").AddField("NTKMode").AddField("DUDMode").AddField("MaxMac");oSubModule.AddTable("PortCfgTable2-table", XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField("Index").AddField("Interface").AddField("PortMode").AddField("NTKMode").AddField("DUDMode").AddField("IgnoreAuthor");oSubModule.AddTable("OUITable-table", XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField("Index").AddField("Mac");oSubModule.AddTable("MACTable-table", PER_GET_COUNT,XCMP_ACTION_GETNEXT).AddField("Mac").AddField("Vlan").AddField("Index").AddField("Interface");oRequest.SendGetRequest("/wcn/portsec/portsec_summary.x");}function OnIrfliteSet (){var oRequest = new XmlRequest (XCMP_ACTION_GET, XCMP_GET_ALL);var oSubModule = oRequest.AddModule ("irflite").AddSubModule ("irflite");oSubModule.AddTable ("irflite-ippool-table").AddField ("ipaddr").AddField("ipmask");oSubModule.AddTable ("irflite-role-table").AddField ("role");oSubModule.AddTable ("irflite-portstack-table",XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField ("portnum").AddField("portstack").AddField ("portname");oRequest.SendGetRequest("/wcn/irf_lite/irflite_setup.x");return true;}function OnIrfliteTpl (){var oRequest = new XmlRequest (XCMP_ACTION_GET, XCMP_GET_ALL);var oSubModule = oRequest.AddModule ("irflite").AddSubModule ("irflite");oSubModule.AddTable ("irflite-role-table").AddField ("role");oSubModule.AddTable ("irflite-get-member-table",XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField("serialid");oRequest.SendGetRequest("/wcn/irf_lite/irflite_tpl.x");return true;}function OnIrfliteStackInfo(nMember){var oRequest = new XmlRequest (XCMP_ACTION_GET, XCMP_GET_ALL);var oSubModule = oRequest.AddModule ("irflite").AddSubModule ("irflite");oSubModule.AddTable ("irflite-role-table").AddField ("role");oSubModule.AddTable("irflite-get-member-table",XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField("serialid").AddField("natport");if(null != nMember){oRequest.AddInfo(nMember);}oRequest.SendGetRequest("/wcn/irf_lite/irflite_info.x");return false;}function OnLldpIfsummary (){var oRequest = new XmlRequest (XCMP_ACTION_GETNEXT, XCMP_GET_ALL);var oSubModule = oRequest.AddModule ("lldp").AddSubModule ("lldp");oSubModule.AddTable ("lldp-get-portcmd-table").AddField ("portnum").AddField("portlldpenable").AddField("portname").AddField("portifindex");oSubModule.AddTable ("lldp-opt1-port-table").AddField ("portnum").AddField("portadmin");oRequest.SendGetRequest("/wcn/lldp/lldp_ifsummary.x");return true;}function OnLldpGlobal (){var oRequest = new XmlRequest (XCMP_ACTION_ONLYGET);var oSubModule = oRequest.AddModule ("lldp").AddSubModule ("lldp");oSubModule.AddTable ("lldp-globalconfigext-table").AddField ("lldpenable").AddField("cdpenable");oSubModule.AddTable ("lldp-globalconfigmed-table").AddField ("FastStartTimes");oSubModule.AddTable ("lldp-globalconfig-table").AddField ("TtlMultiplier").AddField ("TrapInterval").AddField ("ReinitDelay").AddField ("TxDelay").AddField ("TxInterval");oSubModule.AddTable ("lldp-globalconfigext2-table").AddField ("fasttimes-lowpara").AddField ("fasttimes-highpara").AddField ("fasttimes-defaultpara").AddField ("ttlmul-lowpara").AddField ("ttlmul-highpara").AddField ("ttlmul-defaultpara").AddField ("trapinterval-lowpara").AddField ("trapinterval-highpara").AddField ("trapinterval-defaultpara").AddField ("portinin-lowpara").AddField ("portinin-highpara").AddField ("portinin-defaultpara").AddField ("txdelay-lowpara").AddField ("txdelay-highpara").AddField ("txdelay-defaultpara").AddField ("txinterval-lowpara").AddField ("txinterval-highpara").AddField ("txinterval-defaultpara");oRequest.SendGetRequest("/wcn/lldp/lldp_global.x");return true;}function OnLldpNbrInfo (){var oRequest = new XmlRequest (XCMP_ACTION_GETNEXT, XCMP_GET_ALL);var oSubModule = oRequest.AddModule ("lldp").AddSubModule ("lldp");oSubModule.AddTable ("lldp-get-portcmd-table").AddField ("portnum").AddField ("portname");oSubModule.AddTable ("lldp-show-nbr-table").AddField ("time").AddField ("localport").AddField ("remindex").AddField ("chassisid").AddField ("chassisidtype").AddField ("portid").AddField ("portidtype").AddField ("sysname");oRequest.SendGetRequest("/wcn/lldp/lldp_nbrinfo.x");return true;}function OnLldpGlobalInfo (){var oRequest = new XmlRequest (XCMP_ACTION_CLI);var oSubModule = oRequest.AddModule ("lldp").AddSubModule ("lldp");oSubModule.AddTable ("lldp-localglobal-display-table").AddField ("local").AddField("globalinfo");oRequest.SendGetRequest("/wcn/lldp/lldp_globalinfo.x?");  return true;}function OnQosMappingMain(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("qosprimap").AddSubModule("primap");oSubModule.AddTable("primaptbl-table").AddField("tableindex")    .AddField("groupname")     oRequest.SendGetRequest("/wcn/qosmapping/mapping_main.x");    return true;}function OnQosPortPri(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oQosPortPriModule = oRequest.AddModule("qosportpri");oQosPortPriModule.AddSubModule("interface").AddTable("interface-table").AddField("ifindex")    .AddField("ifdescription");oQosPortPriModule.AddSubModule("portpri").AddTable("portprishow-table").AddField("tableindex")    .AddField("portprivalue");oQosPortPriModule.AddSubModule("porttrust").AddTable("porttrustshow-table").AddField("trustindex")    .AddField("porttrusttype");var oSubModule = oRequest.AddModule("wcn").AddSubModule("interface");oSubModule.AddTable("interface-table", XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField("ifindex").AddField("ifname").AddField("iftype");oRequest.SendGetRequest("/wcn/qosportpri/portpri.x");    return true;}function onRmonStatistics(){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oModeul = oRequest.AddModule("rmon")oModeul.AddSubModule("statistic").AddTable("statistic-table").AddField("index", 0).AddField("interface").AddField("owner").AddField("status");oModeul.AddSubModule("intcap").AddTable("intcap-table").AddField("ifname").AddField("ifindex");oRequest.SendGetRequest("/wcn/rmon/statisticsummary.x");return false;}function onRmonHistory(){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oModeul = oRequest.AddModule("rmon")oModeul.AddSubModule("history").AddTable("history-table").AddField("index", 0).AddField("interface").AddField("bucketsrequested").AddField("bucketsgranted").AddField("interval").AddField("owner").AddField("status");oModeul.AddSubModule("intcap").AddTable("intcap-table").AddField("ifname").AddField("ifindex");oRequest.SendGetRequest("/wcn/rmon/historysummary.x");return false;}function onRmonAlarm(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oModeul = oRequest.AddModule("rmon")oModeul.AddSubModule("alarm").AddTable("alarm-table").AddField("index", 0).AddField("interval").AddField("variable").AddField("type").AddField("latest").AddField("startup").AddField("risingthreshold").AddField("fallingthreshold").AddField("risingevent").AddField("fallingevent").AddField("owner").AddField("status");oModeul.AddSubModule("intcap").AddTable("intcap-table").AddField("ifname").AddField("ifindex");oModeul.AddSubModule("statistic").AddTable("statistic-table").AddField("index", 0).AddField("interface");oRequest.SendGetRequest("/wcn/rmon/alarmsummary.x");return false;}function onRmonEvent(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oModeul = oRequest.AddModule("rmon");oModeul.AddSubModule("event").AddTable("event-table").AddField("index", 0).AddField("description").AddField("type").AddField("lasttimesent").AddField("owner").AddField("status");oModeul.AddSubModule("alarm").AddTable("alarm-table").AddField("index", 0).AddField("risingevent").AddField("fallingevent");oRequest.SendGetRequest("/wcn/rmon/eventsummary.x");return false;}function onRmonLog(){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);oRequest.AddModule("rmon").AddSubModule("log").AddTable("log-table").AddField("eventindex", 0).AddField("index", 0).AddField("time").AddField("description");oRequest.SendGetRequest("/wcn/rmon/logsummary.x");return false;}function onInterfaceStatistic(){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);oRequest.AddModule("interfacestatistic").AddSubModule("interfacestatistic").AddTable("display-table").AddField("ifindex").AddField("inoctets").AddField("inucastpkts").AddField("innucastpkts").AddField("indiscards").AddField("inerrors").AddField("inunknownprotos").AddField("outoctets").AddField("outucastpkts").AddField("outnucastpkts").AddField("outdiscards").AddField("outerrors").AddField("time");oRequest.AddModule("wcn").AddSubModule("interface").AddTable("interface-table").AddField("ifname").AddField("ifindex");oRequest.SendGetRequest("/wcn/interfacestatistic/summary.x");return false;}function onGnSav(ifindex,ifnumber){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oModul = oRequest.AddModule("greensaveenergy");var oSubModul = oModul.AddSubModule("greensaveenergy");if(ifindex != null){oSubModul.AddTable("ensav-table").AddField("ifindex",0,XCMP_FILTER_EQUAL,ifindex).AddField("no",0).AddField("starthour").AddField("startmin").AddField("endhour").AddField("endmin").AddField("weekday").AddField("enabled");oRequest.AddInfo("<portnumber>"+ifnumber+"</portnumber><portindex>"+ifindex+"</portindex>");}oSubModul.AddTable("capability-table",1).AddField("capability");oRequest.SendGetRequest("/wcn/greensaveenergy/create.x");return false;}function OnDiagnostic(){top.doAction(window, "wcn/diagnostic/diagnostic.x?uid="+top.WnmGetUID());}function OnSTMGlobal (){var oRequest = new XmlRequest (XCMP_ACTION_ONLYGET);oRequest.AddModule ("stm").AddSubModule ("global-info").AddTable ("ginfoview-table").AddField ("dev-maxnum").AddField ("dev-num").AddField ("dev-maxpriority").AddField ("autoupdate").AddField ("mac-persist").AddField ("link-delay").AddField ("topology");oRequest.SendGetRequest ("/wcn/stm/global_summary.x");return true;}function OnSTMTopology (){var oRequest = new XmlRequest (XCMP_ACTION_GET, XCMP_GET_ALL);var oStmMod = oRequest.AddModule ("stm");oStmMod.AddSubModule ("topology").AddTable ("topoview-table").AddField ("member-id", 0).AddField ("port-id", 0).AddField ("port-status").AddField ("neighbor-id");oStmMod.AddSubModule ("phyport-info").AddTable ("getphyportinfo-table").AddField ("entindex", 0).AddField ("memberid").AddField ("portid");var oWcnMod = oRequest.AddModule ("wcn");oWcnMod.AddSubModule ("interface").AddTable("entity-table").AddField("index", 1).AddField("name");oRequest.SendGetRequest ("/wcn/stm/topology_summary.x");return true;}function OnSTMMemSummary (){var oRequest = new XmlRequest (XCMP_ACTION_GET, XCMP_GET_ALL);var oStmMod = oRequest.AddModule ("stm");oStmMod.AddSubModule ("device-info").AddTable ("getinfo-table").AddField ("entindex", 0).AddField ("memberid").AddField ("configmemberid").AddField ("priority");oStmMod.AddSubModule ("board-info").AddTable ("getboardinfo-table").AddField ("entindex", 0).AddField ("memberid-board").AddField ("boardid").AddField ("roleid");oStmMod.AddSubModule ("topology").AddTable ("topoview-table").AddField ("member-id", 0).AddField ("port-id", 0);oStmMod.AddSubModule ("phyport-info").AddTable ("getphyportinfo-table").AddField ("entindex", 0).AddField ("portid", null, XCMP_FILTER_MORE, 0).AddField ("memberid");var oWcnMod = oRequest.AddModule ("wcn");oWcnMod.AddSubModule ("interface").AddTable("entity-table").AddField("index", 1).AddField("name");oRequest.SendGetRequest ("/wcn/stm/member_summary.x");return true;}function OnSTMMemCfg (){var oRequest = new XmlRequest (XCMP_ACTION_GET, XCMP_GET_ALL);var oStmMod = oRequest.AddModule ("stm");var aFilter = [Iftype.GE, Iftype.XGE, Iftype.L2GE, Iftype.L2XGE, Iftype.IDS_ETHERNET, Iftype.IDS_GE, Iftype.IDS_XGE,Iftype.IDS_FGE, Iftype.IDS_HGE];var oIfData = oRequest.AddModule ("wcn");oIfData.AddSubModule ("interface").AddTable ("ifindex-table").AddField ("ifindex").AddField ("iftype", null, XCMP_FILTER_EQUAL, aFilter).AddField ("shutdownstatus");oStmMod.AddSubModule ("global-info").AddTable ("ginfoview-table").AddField ("dev-maxnum").AddField ("dev-maxpriority").AddField ("cfg-needactive");oStmMod.AddSubModule ("device-info").AddTable ("getinfo-table").AddField ("entindex", 0).AddField ("memberid").AddField ("configmemberid").AddField ("priority");oStmMod.AddSubModule ("phyport-info").AddTable ("getphyportinfo-table").AddField ("entindex", 0).AddField ("portid").AddField ("memberid");oRequest.SendGetRequest ("/wcn/stm/membercfg_summary.x");return true;}function OnSTM (nIndex){showContent ([[RS_TAB_GLOBAL, RS_TAB_GLOBAL_DESC,  "js::OnSTMGlobal()", 2, null,  null],[RS_TAB_TOPOLOGY, RS_TAB_TOPOLOGY_DESC,  "js::OnSTMTopology()", 1, null,  null],[RS_TAB_MEMBERSUMMARY, RS_TAB_MEMBERSUMMARY_DESC, "js::OnSTMMemSummary()",  1, null,  null],[RS_TAB_MEMBERCONFIG, RS_TAB_MEMBERCONFIG_DESC, "js::OnSTMMemCfg()", 2, null,  null]  ], nIndex);}function OnIGSPBasic(){var oRequest = new XmlRequest(XCMP_ACTION_ONLYGET);var oSubModule = oRequest.AddModule("mcs").AddSubModule("mcs");oSubModule.AddTable("global-get-table").AddField("index","pub").AddField("status");oSubModule.AddTable("vlan-table",XCMP_GET_ALL,XCMP_ACTION_GETNEXT).AddField("vlanid").AddField("enable").AddField("version").AddField("querier").AddField("queryinterval").AddField("dropunknown");oSubModule.AddTable("entry-table",XCMP_GET_ALL,XCMP_ACTION_GETNEXT).AddField("vlanid").AddField("source").AddField("group"); oSubModule.AddTable("drop-unknown-table", XCMP_GET_ALL, XCMP_ACTION_ONLYGET).AddField("drop-unknown-type");oRequest.SendGetRequest("/wcn/mcs/mcs_basic.x");}function OnIGSPAdvance(){var oRequest = new XmlRequest(XCMP_ACTION_ONLYGET);var oSubModule = oRequest.AddModule("mcs").AddSubModule("mcs");oSubModule.AddTable("mcs-interface-table", XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField("portindex").AddField("portname");oSubModule.AddTable("grp-upper-lmt-table", XCMP_GET_ALL, XCMP_ACTION_ONLYGET).AddField("upper-limit");oRequest.SendGetRequest("/wcn/mcs/mcs_advance.x");}function OnEponBoardList(){var oRequest = new XmlRequest (XCMP_ACTION_GETNEXT, XCMP_GET_ALL);var oSubModule = oRequest.AddModule ("epon").AddSubModule ("board");oSubModule.AddTable ("list-table").AddField ("frameindex").AddField ("slotindex").AddField ("boardtype");oSubModule.AddTable ("entity-table",XCMP_GET_ALL, XCMP_ACTION_ONLYGET).AddField ("index",1).AddField ("producttype");oSubModule.AddTable ("key-table").AddField ("slotindex").AddField ("update").AddField ("timeout");oSubModule.AddTable ("ouicfg-table").AddField ("slotindex").AddField ("ouiindex").AddField ("oui").AddField ("oamver");oRequest.SendGetRequest("/wcn/epon/eponboard_list.x");return true;}function OnEponOltList(){var oRequest = new XmlRequest (XCMP_ACTION_GETNEXT, XCMP_GET_ALL);var oSubModule = oRequest.AddModule ("epon").AddSubModule ("olt");oSubModule.AddTable ("oltlist-table").AddField ("oltifindex").AddField ("oltname",null,XCMP_FILTER_INCLUDE,"Olt").AddField ("oltstatus").AddField ("oltadm");oSubModule.AddTable ("oltcfg-table").AddField ("oltifindex").AddField ("rtt");oSubModule.AddTable ("dbaupdate-table").AddField ("oltifindex").AddField ("type").AddField ("version");oRequest.SendGetRequest("/wcn/epon/eponolt_list.x");return true;}function OnEponFtth(){var oRequest = new XmlRequest (XCMP_ACTION_GETNEXT, XCMP_GET_ALL);var oSubModule = oRequest.AddModule ("epon").AddSubModule ("ftth");oSubModule.AddTable ("multi-table").AddField ("vlanid").AddField ("ip");oRequest.SendGetRequest("/wcn/epon/eponftth.x");return true;}function OnEponOnuList(){var oRequest = new XmlRequest (XCMP_ACTION_GETNEXT, XCMP_GET_ALL);var oSubModule = oRequest.AddModule ("epon").AddSubModule ("onu");oSubModule.AddTable ("onulist-table").AddField ("onuifindex").AddField ("onuname",null,XCMP_FILTER_INCLUDE,"Onu").AddField ("onustatus").AddField ("onuadm");	oSubModule.AddTable ("bind-table").AddField ("ifindex").AddField ("mac");oSubModule.AddTable ("onuinfo-table").AddField ("ifindex").AddField ("version").AddField ("devicetype");oRequest.SendGetRequest("/wcn/epon/epononu_list.x");return true;}function OnUniListGRID16(){	var oRequest = new XmlRequest (XCMP_ACTION_GETNEXT, XCMP_GET_ALL);var oModule = oRequest.AddModule ("epon");oModule.AddSubModule ("onu").AddTable ("onuname-table").AddField ("onuifindex").AddField ("onuname",null,XCMP_FILTER_INCLUDE,"Onu");oRequest.SendGetRequest("/wcn/epon/eponuni_list.x");return true;}function OnEponUpdateOnu(){var oRequest = new XmlRequest (XCMP_ACTION_GETNEXT, XCMP_GET_ALL);var oSubModule = oRequest.AddModule ("epon").AddSubModule ("onu");oSubModule.AddTable ("oltname-table").AddField ("oltifindex").AddField ("oltname",null,XCMP_FILTER_INCLUDE,"Olt");oSubModule.AddTable ("onuname-table").AddField ("onuifindex").AddField ("onuname",null,XCMP_FILTER_INCLUDE,"Onu");oSubModule.AddTable("sysfile-summary-table").AddField("sysfile-flash").AddField("sysfile-partion").AddField("sysfile-index").AddField("sysfile-name",null,XCMP_FILTER_ENDWITH,"app");    oRequest.SendGetRequest("/wcn/epon/eponupdate_onu.x");return true;}function OnEponUpdateDBA(){var oRequest = new XmlRequest (XCMP_ACTION_GETNEXT, XCMP_GET_ALL);var oModule = oRequest.AddModule ("epon");var oSubModuleOnu = oModule.AddSubModule ("onu");var oSubModuleOlt = oModule.AddSubModule ("olt");oSubModuleOnu.AddTable ("oltname-table").AddField ("oltifindex").AddField ("oltname",null,XCMP_FILTER_INCLUDE,"Olt");oSubModuleOnu.AddTable ("sysfile-summary-table").AddField ("sysfile-flash").AddField ("sysfile-partion").AddField ("sysfile-index").AddField ("sysfile-name",null,XCMP_FILTER_ENDWITH,"app");   oSubModuleOlt.AddTable ("dbaupdate-table").AddField ("oltifindex").AddField ("type").AddField ("version");oRequest.SendGetRequest("/wcn/epon/eponupdate_dba.x");return true;}function OnEponMulticastInfo(){var oRequest = new XmlRequest (XCMP_ACTION_GETNEXT, XCMP_GET_ALL);var oSubModule = oRequest.AddModule ("epon").AddSubModule ("onu");oSubModule.AddTable ("onuname-table").AddField ("onuifindex").AddField ("onuname",null,XCMP_FILTER_INCLUDE,"Onu");	oSubModule.AddTable ("onumulti-table").AddField ("onuifindex").AddField ("multicastmode");	oRequest.SendGetRequest("/wcn/epon/eponmulti_info.x");return true;}function OnEponOnuMulti(){var oRequest = new XmlRequest (XCMP_ACTION_GETNEXT, XCMP_GET_ALL);var oSubModule = oRequest.AddModule ("epon").AddSubModule ("onu");oSubModule.AddTable ("onuname-table").AddField ("onuifindex").AddField ("onuname",null,XCMP_FILTER_INCLUDE,"Onu");	oSubModule.AddTable ("onumulti-table").AddField ("onuifindex").AddField ("multicastmode");oRequest.SendGetRequest("/wcn/epon/eponmulti_onu.x");return true;}function OnEponUniMulti(){var oRequest = new XmlRequest (XCMP_ACTION_GETNEXT, XCMP_GET_ALL);var oSubModule = oRequest.AddModule ("epon").AddSubModule ("onu");oSubModule.AddTable ("onuname-table").AddField ("onuifindex").AddField ("onuname",null,XCMP_FILTER_INCLUDE,"Onu");	oSubModule.AddTable ("onumulti-table").AddField ("onuifindex").AddField ("multicastmode");	oRequest.SendGetRequest("/wcn/epon/eponuni_multi.x");return true;}function OnInitMacObject(){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("resource").AddSubModule("mac-address");oSubModule.AddTable("mac-table").AddField("mac-name").AddField("mac-comment").AddField("mac-refcount").AddField("mac-addr").AddField("owner-id",top.WnmGetVID());oRequest.SendGetRequest("/wcn/object/mac.x");}function OnInitMacGroup(sTarget){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("resource").AddSubModule("obj-mac-group");sTarget = sTarget ? sTarget : "";oSubModule.AddTable("mac-group-table").AddField("mac-group-name").AddField("mac-group-elements").AddField("mac-group-comment").AddField("mac-group-refcount").AddField("owner-id",top.WnmGetVID());if(sTarget)oRequest.AddInfo("<jumpBack>"+sTarget+"</jumpBack>");oRequest.SendGetRequest("/wcn/object/mac-group.x");}function OnFapWrrmAntenExchange(){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("fapwrrm").AddSubModule("fapexchange");oSubModule.AddTable("radio-switch-table").AddField("radio-name").AddField("wire-use");oSubModule.AddTable("radio-table").AddField("apindex").AddField("ifindex").AddField("ifdescr");oRequest.SendGetRequest("/wcn/fapanten/fapwrrm_anten_swh.x");}function OnFapUserIsolate(){var oRequest = new XmlRequest(XCMP_ACTION_GET);var oSubModule = oRequest.AddModule("fapids").AddSubModule("userisolate");oSubModule.AddTable("isolate-status-table").AddField("status");oRequest.SendGetRequest("/wcn/fapids/fapuserisolate.x");}function OnFapAreaCode(){var oRequest = new XmlRequest(XCMP_ACTION_ONLYGET);var oSubModule = oRequest.AddModule("fapadvance").AddSubModule("fapadvance");oSubModule.AddTable("countrycode-get-table").AddField("countrycode").AddField("countrycodelock");oRequest.SendGetRequest("/wcn/fapadvance/fapareacode.x");}function OnSwitchToFit(){top.doAction(top.GetCtrlWindow(), "url::"+"/wcn/fapadvance/fapswitch2fit.x");}function OnFapRadioModal(){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("fapadvance").AddSubModule("fapadvance");oSubModule.AddTable("radio-table").AddField("apindex").AddField("ifindex").AddField("ifdescr");oSubModule.AddTable("radio-modal-table").AddField("radioindex").AddField("runstate").AddField("rate");oSubModule.AddTable("radio-type-table").AddField("radioindex").AddField("radiotype");oRequest.SendGetRequest("/wcn/fapadvance/fapradiomodal.x");}function OnFapUpLinkChk(){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("fapadvance").AddSubModule("fapadvance");oSubModule.AddTable("interface-table").AddField("ifindex").AddField("ifdescr");oSubModule.AddTable("uplink-check-table").AddField("ifindex").AddField("linkstatus").AddField("uplinkstatus");oRequest.SendGetRequest("/wcn/fapadvance/fapuplinkcheck.x");}function OnFapCwmp(){var oRequest = new XmlRequest(XCMP_ACTION_GET);var oSubModule = oRequest.AddModule("fapcwmp").AddSubModule("fapcwmp");oSubModule.AddTable("cwmp-managementsrv-table").AddField("tib-acs-url").AddField("tib-acs-username").AddField("tib-acs-password");return oRequest.SendGetRequest("/wcn/fapcwmp/fapcwmp_config.x");}function OnFapRadio(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("fapsummary").AddSubModule("rdlist");oSubModule.AddTable("apradio-table").AddField("ap-id").AddField("radio-id").AddField("rd-id").AddField("admin-sts").AddField("opera-sts").AddField("channel").AddField("txpwr-level").AddField("radio-if-index").AddField("service-type").AddField("res-use-ratio").AddField("nfvalue");oSubModule.AddTable("if-table").AddField("ifindex")    .AddField("ifdescr")    .AddField("iftype",null,XCMP_FILTER_EQUAL,71)   .AddField("ifsts");    oSubModule.AddTable("rdintfcfg-table").AddField("rdifidx")    .AddField("rdcfg-type");    oRequest.SendGetRequest("/wcn/fapsummary/fapradiosummary.x");}function OnFapWmmSummary(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("fapqos").AddSubModule("fapqos");oSubModule.AddTable("fapqos-rdcfg-table").AddField("fapqos-rdindex").AddField("fapqos-enabled").AddField("fapqos-svp").AddField("fapqos-cacpolicy").AddField("fapqos-cacchlutlvalue").AddField("fapqos-cacusernum");oSubModule.AddTable("fapqos-int-table").AddField("fapqos-ifindex").AddField("fapqos-ifname");oSubModule.AddTable("fapqos-radio-table").AddField("fapqos-curapid").AddField("fapqos-radioifidx").AddField("fapqos-radioid");oRequest.SendGetRequest("/wcn/fapqos/fapwmm_setup.x");return false;}function OnFapWmmRadioSum(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("fapqos").AddSubModule("fapqos");oSubModule.AddTable("fapqos-rdcfg-table").AddField("fapqos-rdindex").AddField("fapqos-enabled");oSubModule.AddTable("fapqos-int-table").AddField("fapqos-ifindex").AddField("fapqos-ifname");oSubModule.AddTable("fapqos-radio-table").AddField("fapqos-curapid").AddField("fapqos-radioifidx").AddField("fapqos-radioid");oSubModule.AddTable("fapqos-radiomode-table").AddField("modename").AddField("radioid");oRequest.SendGetRequest("/wcn/fapqos/fapwmm_rd.x");return false;}function OnFapWmmClientSum(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("fapqos").AddSubModule("client");oSubModule.AddTable("clt-table").AddField("clt-macaddress").AddField("clt-ssidname").AddField("clt-qosmode");oRequest.SendGetRequest("/wcn/fapqos/fapwmm_clt.x");return false;}function OnFapWlanQosService(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("fapqos").AddSubModule("wlanqos");oSubModule.AddTable("if-table").AddField("ifindex").AddField("ifdescr").AddField("iftype",null,XCMP_FILTER_EQUAL, 6);oSubModule.AddTable("rd-intfbd-table").AddField("svid").AddField("ifidx").AddField("bindid");oSubModule.AddTable("wlanqos-serv-table").AddField("wlanservid").AddField("ssid");oSubModule.AddTable("wlanqos-pri-table").AddField("ifindex").AddField("qospri");oSubModule.AddTable("wlanqos-trust-table").AddField("ifindex").AddField("trustmode");oSubModule.AddTable("wlanqos-direction-table").AddField("ifindex").AddField("direction").AddField("plcyname");oRequest.SendGetRequest("/wcn/fapqos/fapqos_service.x");}function OnWlanWdsSummary(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("fapwdssummary").AddSubModule("fapwdssummary");oSubModule.AddTable("wdsinfosum-table").AddField("curapid").AddField("wdsradioidindex").AddField("wdsradioid").AddField("wdsradiomode").AddField("wdsstatus").AddField("wdsradioifname").AddField("wdsradioifindex");   oSubModule.AddTable("apworkmode-table").AddField("apindex").AddField("workmode");oRequest.SendGetRequest("/wcn/fapwds/fap_wdssummary.x");return false; }function OnFapIdsBlackList(){var oRequest = new XmlRequest(XCMP_ACTION_ONLYGET);var oSubModule = oRequest.AddModule("idsblacklist").AddSubModule("idsblacklist");oSubModule.AddTable("dyblacklist-table").AddField("dyblacklistenable").AddField("dyblacklistlasttime");oSubModule.AddTable("blackvalue-table").AddField("blackminvalue").AddField("blackmaxvalue").AddField("blackdefvalue");oRequest.SendGetRequest("/wcn/fapids/fapids_blacklist.x");}function OnFapIdsIndetHis(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("idsindethis").AddSubModule("idsindethis");oSubModule.AddTable("histable-table").AddField("atkhisindex").AddField("atkhismac").AddField("atkhistype").AddField("atkhischl").AddField("atkhisrssi").AddField("atkhistime").AddField("atkhisname");oRequest.SendGetRequest("/wcn/fapids/fapids_indethis.x");} function OnFapIdsIndetSet(){var oRequest = new XmlRequest(XCMP_ACTION_ONLYGET);var oSubModule = oRequest.AddModule("idsindetset").AddSubModule("idsindetset"); oSubModule.AddTable("settable-table").AddField("flooddct").AddField("spoofdct").AddField("weakivdct");oRequest.SendGetRequest("/wcn/fapids/fapids_indetset.x");}function OnFapIdsIndetSta(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("idsindetsta").AddSubModule("idsindetsta");oSubModule.AddTable("statable-table").AddField("atkstatype").AddField("atkstacur").AddField("atkstahis");oRequest.SendGetRequest("/wcn/fapids/fapids_indetsta.x");}function OnFapIdsWhiteList(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("idswhitelist").AddSubModule("idswhitelist");oSubModule.AddTable("whitetable-table").AddField("whitemac");oRequest.SendGetRequest("/wcn/fapids/fapids_whitelist.x");}function OnFapScan(){var oRequest = new XmlRequest(XCMP_ACTION_ONLYGET);var oSubModule = oRequest.AddModule("fapscan").AddSubModule("fapscan");oSubModule.AddTable("fapscan-avoid11h-get-table").AddField("avoid11h");oSubModule.AddTable("fapscan-scantype-table").AddField("scantype");oSubModule.AddTable("fapscan-rptinterval-table").AddField("rptinterval");oSubModule.AddTable("fapscan-rptinterval-para-table").AddField("rptinterval-min").AddField("rptinterval-max").AddField("rptinterval-def");oRequest.SendGetRequest("/wcn/fapscan/fapscan_para.x");return false;}function OnFapApMonitor(){var oRequest = new XmlRequest(XCMP_ACTION_ONLYGET);var oSubModule = oRequest.AddModule("fapapmonitor").AddSubModule("fapapmonitor");oSubModule.AddTable("fapapmonitor-workmode-table").AddField("workmode");oRequest.SendGetRequest("/wcn/fapapmonitor/fapapmonitor.x");return false;}function OnFapRssiMonitorDetect(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT, XCMP_GET_ALL);var oSubModule = oRequest.AddModule("faprssimonitor").AddSubModule("detectlist");oSubModule.AddTable("detectlist-display-table").AddField("macaddress").AddField("devtype").AddField("ssid").AddField("security").AddField("radiomode").AddField("channel").AddField("rssi");oRequest.SendGetRequest("/wcn/faprssimonitor/faprssimonitor_detect.x");return false;}function OnFapRssiMonitorHistory(){var oRequest = new XmlRequest(XCMP_ACTION_ONLYGET);var oSubModule = oRequest.AddModule("faprssimonitor").AddSubModule("historylist");oSubModule.AddTable("device-aging-get-table").AddField("agingtime");oSubModule.AddTable("device-aging-para-table").AddField("min").AddField("max").AddField("def");oSubModule.AddTable("historylist-display-table", XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField("index").AddField("macaddress").AddField("devtype").AddField("ssid").AddField("security").AddField("radiomode").AddField("channel").AddField("rssi").AddField("lasttime");oRequest.SendGetRequest("/wcn/faprssimonitor/faprssimonitor_history.x");return false;}function OnAtkBlackList(){  var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("atk").AddSubModule("atk");oSubModule.AddTable("bls-enable-table").AddField("enableblsstatus");	oSubModule.AddTable("bls-disp-table",XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField("ipaddress").AddField("method").AddField("starttime").AddField("lasttime").AddField("dropcount");oRequest.SendGetRequest("/wcn/atk/blacklist.x");return false;}function OnAtkIcgPolicy(){var oRequest = new XmlRequest(XCMP_ACTION_GET,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("atk").AddSubModule("atk");oSubModule.AddTable("atk-disp-table").AddField("policyid",1).AddField("enable").AddField("fraggle").AddField("land").AddField("winnuke").AddField("tcpflag").AddField("icmpunreachable").AddField("icmpredirect").AddField("tracert").AddField("smurf").AddField("sourceroute").AddField("routerecord").AddField("largeicmp").AddField("scan").AddField("scantobls").AddField("synflood").AddField("udpflood").AddField("icmpflood");oRequest.SendGetRequest("/wcn/atk/atkpolicy.x");return false;}function OnAtkRouterPolicy(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("atk").AddSubModule("atk");oSubModule.AddTable("atk-dispinf-table").AddField("policyid").AddField("interface").AddField("ifname").AddField("method",1).AddField("status");oSubModule.AddTable("inf-table",XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField("interface").AddField("ifname").AddField("method",0);oRequest.SendGetRequest("/wcn/atk/atkpolicysumm.x");return false;}function OnSimpleSnmp(){var oRequest = new XmlRequest(XCMP_ACTION_ONLYGET);var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT, XCMP_GET_ALL);var oSubModule = oRequest.AddModule("wcn").AddSubModule("snmp");oSubModule.AddTable("snmp-disp-table", 1, XCMP_ACTION_ONLYGET).AddField("server-disable").AddField("version");oSubModule.AddTable("sys-group-disp-table", 1, XCMP_ACTION_ONLYGET).AddField("contact").AddField("name").AddField("location");oSubModule.AddTable("frame-disp-table", 1, XCMP_ACTION_ONLYGET).AddField("snmpengineid");oSubModule.AddTable("group-disp-table", XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField("groupname").AddField("contextprefix").AddField("securitymodel").AddField("securitylevel").AddField("acl").AddField("communityflag").AddField("readviewname").AddField("writeviewname").AddField("notifyviewname").AddField("status", null, XCMP_FILTER_EQUAL, 1);oSubModule.AddTable("userrelation-disp-table", XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField("securitymodel", null, XCMP_FILTER_EQUAL, 3) .AddField("securityname").AddField("groupname").AddField("storagetype").AddField("acl").AddField("communityflag", null, XCMP_FILTER_EQUAL, 3) .AddField("status", null, XCMP_FILTER_EQUAL, 1);oSubModule.AddTable("usmuser-disp-table", XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField("engineid").AddField("name").AddField("securityname").AddField("authprotocol").AddField("privprotocol").AddField("status", null, XCMP_FILTER_EQUAL, 1);oSubModule.AddTable("target-disp-table", XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField("addrname").AddField("addrtdomain").AddField("addrtaddress").AddField("addrtimeout").AddField("addrretrycount").AddField("addrtaglist").AddField("addrparams").AddField("addrstoragetype").AddField("addrrowstatus", null, XCMP_FILTER_EQUAL, 1);oSubModule.AddTable("target-para-disp-table", XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField("msname").AddField("msmpmodel").AddField("mssecuritymodel").AddField("mssecurityname").AddField("mssecuritylevel").AddField("msstoragetype").AddField("msrowstatus", null, XCMP_FILTER_EQUAL, 1);oSubModule.AddTable("view-disp-table", XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField("viewname").AddField("subtree").AddField("mask").AddField("type").AddField("status", null, XCMP_FILTER_EQUAL, 1);oSubModule.AddTable("initialtrap-table", 1, XCMP_ACTION_ONLYGET).AddField("secname");oRequest.SendGetRequest("/wcn/snmp/simple_snmp.x");}function OnSnmpSetup(){var oRequest = new XmlRequest(XCMP_ACTION_ONLYGET);var oSubModule = oRequest.AddModule("wcn").AddSubModule("snmp");oSubModule.AddTable("snmp-disp-table").AddField("server-disable").AddField("version");oSubModule.AddTable("sys-group-disp-table").AddField("contact").AddField("location");oSubModule.AddTable("frame-disp-table").AddField("snmpengineid").AddField("enginemaxmessagesize").AddField("enginemaxmessagedefault");oSubModule.AddTable("statistics-disp-table").AddField("inpkts").AddField("inbadversions").AddField("inbadcommunitynames").AddField("inbadcommunityuses").AddField("inasnparseerrs").AddField("intotalsetvars").AddField("intotalreqvars").AddField("ingetrequests").AddField("ingetnexts").AddField("insetrequests").AddField("outpkts").AddField("outtoobigs").AddField("outnosuchnames").AddField("inbadvalues").AddField("outgenerrs").AddField("outgetresponses").AddField("outtraps");oRequest.SendGetRequest("/wcn/snmp/snmp_setup.x");}function OnSnmpCommunity(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT, XCMP_GET_ALL);var oSubModule = oRequest.AddModule("wcn").AddSubModule("snmp");oSubModule.AddTable("group-disp-table", XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField("groupname").AddField("contextprefix").AddField("securitymodel", null, XCMP_FILTER_EQUAL, 1) .AddField("securitylevel").AddField("acl").AddField("communityflag", null, XCMP_FILTER_EQUAL, 0) .AddField("readviewname").AddField("writeviewname").AddField("notifyviewname").AddField("status");oSubModule.AddTable("view-disp-table", XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField("viewname").AddField("subtree").AddField("mask").AddField("type").AddField("status");oRequest.SendGetRequest("/wcn/snmp/snmp_community.x");}function OnSnmpGroup(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT, XCMP_GET_ALL);var oSubModule = oRequest.AddModule("wcn").AddSubModule("snmp");oSubModule.AddTable("group-disp-table", XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField("groupname").AddField("contextprefix").AddField("securitymodel", null, XCMP_FILTER_EQUAL, 3) .AddField("securitylevel").AddField("acl").AddField("communityflag", null, XCMP_FILTER_EQUAL, 1) .AddField("readviewname").AddField("writeviewname").AddField("notifyviewname").AddField("status");oSubModule.AddTable("view-disp-table", XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField("viewname").AddField("subtree").AddField("mask").AddField("type").AddField("status");oRequest.SendGetRequest("/wcn/snmp/snmp_group.x");}function OnSnmpUser(){var oRequest = new XmlRequest(XCMP_ACTION_GET);var oSubModule = oRequest.AddModule("wcn").AddSubModule("snmp");oSubModule.AddTable("userrelation-disp-table", XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField("securitymodel", null, XCMP_FILTER_EQUAL, 3) .AddField("securityname").AddField("groupname").AddField("storagetype").AddField("acl").AddField("communityflag", null, XCMP_FILTER_EQUAL, 3) .AddField("status");oSubModule.AddTable("usmuser-disp-table", XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField("engineid").AddField("name").AddField("securityname").AddField("authprotocol").AddField("privprotocol").AddField("status");oSubModule.AddTable("group-disp-table", XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField("groupname").AddField("contextprefix").AddField("securitymodel", null, XCMP_FILTER_EQUAL, 3) .AddField("securitylevel").AddField("acl").AddField("communityflag", null, XCMP_FILTER_EQUAL, 1) .AddField("readviewname").AddField("writeviewname").AddField("notifyviewname").AddField("status");oRequest.SendGetRequest("/wcn/snmp/snmp_user.x");}function OnSnmpView(){var oRequest = new XmlRequest(XCMP_ACTION_GET);var oSubModule = oRequest.AddModule("wcn").AddSubModule("snmp");oSubModule.AddTable("snmp-disp-table", 1, XCMP_ACTION_ONLYGET).AddField("server-disable");oSubModule.AddTable("view-disp-table", XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField("viewname").AddField("subtree").AddField("mask").AddField("type").AddField("status");oRequest.SendGetRequest("/wcn/snmp/snmp_view.x");}function L2TPGroup(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT, 100);var nInvalid = 0xffffffff;var oSubMode = oRequest.AddModule("l2tp").AddSubModule("l2tp");oSubMode.AddTable("l2tpgroupconfig-table")   .AddField("groupmode", nInvalid).AddField("groupname").AddField("tunpeername");var oSubMode = oRequest.AddModule("aaa").AddSubModule("aaa");oSubMode.AddTable("aaa-peer-table", XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField("ifindex", nInvalid).AddField("assignpool").AddField("assignipaddr");var oSubMode = oRequest.AddModule("wcn").AddSubModule("interface");oSubMode.AddTable("interface-table", XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField("ifindex", nInvalid).AddField("ifname", null, XCMP_FILTER_INCLUDE, "Virtual-Template");var oSubMode = oRequest.AddModule("vt").AddSubModule("vt");oSubMode.AddTable("pppauthen-table", XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField("ifindex").AddField("papmode").AddField("chapmode").AddField("domainname");if(true == top.CheckSpec("Vdm")){var oSubMode = oRequest.AddModule("virdev").AddSubModule("virdev");oSubMode.AddTable("virdev-interface-table", XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField("virdevname", null,XCMP_FILTER_EQUAL,top.WnmGetVName())  .AddField("virdevifname", null, XCMP_FILTER_INCLUDE, "Virtual-Template");	oSubMode.AddTable("virdev-range-table",1, XCMP_ACTION_ONLYGET).AddField("virdevidmax" );}				oRequest.SendGetRequest("/wcn/l2tp/l2tpsumm.x");return true;}function L2TPTunnel(){var oRequest = new XmlRequest(XCMP_ACTION_GET, PER_GET_COUNT);  var nInvalid = 0xffffffff;var nvid = top.WnmGetVID();  oRequest.AddModule("l2tp").AddSubModule("l2tp").AddTable("l2tptuninfo-table").AddField("tunlocalnum", nInvalid).AddField("tunpeernum",nvid)  .AddField("tunpeerip").AddField("tunpeerport").AddField("sessionnum").AddField("tunpeername");oRequest.SendGetRequest("/wcn/l2tp/tunn_summ.x"); }function OnModem3GSummary (szReturnAction){var oRequest = new XmlRequest(XCMP_ACTION_GET, 1);var oModule = oRequest.AddModule ("g3modem");oModule.AddSubModule ("modem").AddTable ("modeminfo-table").AddField ("entidx", 0).AddField ("model").AddField ("manufacturer").AddField ("serialnumber").AddField ("cmiiid").AddField ("hardware").AddField ("firmware").AddField ("prl");oModule.AddSubModule ("uim").AddTable ("uiminfo-table").AddField ("modem-entidx", 0).AddField ("uim-idx", 0).AddField ("status").AddField ("imsi").AddField ("voltage").AddField ("provider").AddField ("signal").AddField ("network_desc");if (null != szReturnAction){var szInfo = "<ReturnAction>"+ szReturnAction +"</ReturnAction>";oRequest.AddInfo (szInfo);}oRequest.SendGetRequest ("/wcn/modem3g/summary.x");}function OnUIMPinMan (){var oRequest = new XmlRequest(XCMP_ACTION_GET, 1);var oModule = oRequest.AddModule ("g3modem");oModule.AddSubModule ("modem").AddTable ("modeminfo-table").AddField ("entidx", 0);oModule.AddSubModule ("uim").AddTable ("uiminfo-table").AddField ("modem-entidx", 0).AddField ("uim-idx", 0).AddField ("status").AddField ("pinpuktrytime");oRequest.SendGetRequest ("/wcn/modem3g/uim_man.x");return true;}function onWebRedirect(){  var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT, XCMP_GET_ALL);var oSubModule = oRequest.AddModule("webredirect").AddSubModule("webredirect");oSubModule.AddTable("webredirect-get-table", XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField("interface-index").AddField("url").AddField("interval-time").AddField("interface-name");oRequest.SendGetRequest("/wcn/webredirect/webredirect.x");}function onTrustHost(){var oRequest = new XmlRequest (XCMP_ACTION_GETNEXT, XCMP_GET_ALL);var oAcl = oRequest.AddModule ("trusthost").AddSubModule ("acl");oAcl.AddTable ("basicacl-table", XCMP_GET_ALL, XCMP_ACTION_GETNEXT).AddField ("grouptype").AddField ("groupindex-aclrule").AddField ("acl-name",0,XCMP_FILTER_INCLUDE,"trusthostaclname");   oAcl.AddTable ("nextacl-table", XCMP_GET_ALL, XCMP_ACTION_ONLYGET).AddField ("nextbasicacl").AddField ("maxruleperacl").AddField ("rulecount").AddField ("maxrule");oAcl.AddTable("aclrule-table",XCMP_GET_ALL,XCMP_ACTION_GETNEXT).AddField("grouptype").AddField("groupindex-aclrule").AddField("ruleindex").AddField("action").AddField("rule-ip-type").AddField("rule-addr").AddField("rule-ip-any").AddField("rule-wildcard");oAcl.AddTable ("telnet-vty-max-table", XCMP_GET_ALL, XCMP_ACTION_ONLYGET).AddField ("vty-max");oRequest.SendGetRequest ("/wcn/trusthost/trusthost.x");}function OnIcgWlanAdvSet(){var oRequest = new XmlRequest(XCMP_ACTION_GETNEXT,XCMP_GET_ALL);var oSubModule = oRequest.AddModule("fapwrrm").AddSubModule("rdlist");oSubModule.AddTable("rdintfcfg-table").AddField("rdifidx")    .AddField("rdsuppmode").AddField("channel").AddField("max-txpwrlvl").AddField("rdcfg-type");    oSubModule.AddTable("apradio-table").AddField("ap-id")    .AddField("radio-id")    .AddField("rd-id")    .AddField("radio-if-index").AddField("def-rdmode");    oSubModule.AddTable("if-table").AddField("ifindex")    .AddField("ifdescr")    .AddField("iftype",null,XCMP_FILTER_EQUAL, 71)  .AddField("ifsts");    var oSubModule1 = oRequest.AddModule("fapids").AddSubModule("userisolate");oSubModule1.AddTable("isolate-status-table",1,XCMP_ACTION_ONLYGET).AddField("status");var oSubModule2 = oRequest.AddModule("fapqos").AddSubModule("fapqos");oSubModule2.AddTable("fapqos-rdcfg-table").AddField("fapqos-rdindex").AddField("fapqos-enabled");oRequest.SendGetRequest("/wcn/icg_wlan/icg_wlanadvsetup.x");    }