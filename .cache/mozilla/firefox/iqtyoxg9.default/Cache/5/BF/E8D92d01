(function(){var BASE_PATH = "/";function log(sMessage, sType){var Frame = window.Frame||top.Frame;Frame && Frame.log && Frame.log(sMessage, sType, "TableView");}var EID = {CFG_RESTORE:	1100,UPDATE_VIEW:	1110,QUERY_CHANGE:	1120,DATA_CHANGE:	1130,LOADE_COMPLEATE:1140,DO_SORT:		1150,MAX:0xFFFFFFFF};var oResource = Resource.MList2var gMlist2Images = {MDF:          BASE_PATH+"images/icon_mdf.gif",DTL:          BASE_PATH+"images/icon_dtl.gif",START:        BASE_PATH+"images/icon_start.gif",STOP:         BASE_PATH+"images/icon_stop.gif",REBOOT:       BASE_PATH+"images/icon_reboot.gif",DISCONN:      BASE_PATH+"images/icon_disconnection.gif",DEL:          BASE_PATH+"images/icon_del.gif",ROWEDIT:      BASE_PATH+"images/icon_editline.gif",APPLY:        BASE_PATH+"images/btn_ok.gif",CANCEL:       BASE_PATH+"images/btn_close.gif",BIND:         BASE_PATH+"images/icon_bind.gif",LOADING:      BASE_PATH+"images/loading.gif"};var oOperateTypes = {"modify":          {img: gMlist2Images["MDF"]},"delete":          {img: gMlist2Images["DEL"]},"custom":       {img: null},"default": {text:null}};var oColumType = {"string":	function(s){return s.toLowerCase();},"number":	function(s){return parseInt(s, 10)||0;},"ip":		Frame.Util.ipToInteger,"port":		Frame.Util.portToString};var _imgs={};function preLoadImg(){for(var i in gMlist2Images){o = new Image();o.src = gMlist2Images[i];_imgs[i] = o;}}function isRoleUser(aRoles){var role = top.level;var oRoles = {};aRoles = aRoles||[];for(var i in aRoles){oRoles["s"+aRoles[i]] = i;};return (("s" + role) in oRoles);}function isEqual(a1, a2){if(a1 === a2){return true;}if(a1.length === a2.length){for(var i=0; i< a1.length; i++){if(a1[i] !== a2[i]){return false;}}return true;}return false;}function getDataDescription(sDataRelation){var bDesignateTable = ( sDataRelation.indexOf(".") >= 0 );var sTableName = bDesignateTable?sDataRelation.split(".")[0]:"main";var sFieldName = bDesignateTable?sDataRelation.split(".")[1]:sDataRelation;return {table:sTableName, field:sFieldName};}function RunStatus(sGlobalId){var NAME = "TableView";var sId = sGlobalId;this.save = function(sName, oInfo){var oTableView = Frame.load(NAME);if(!oTableView){oTableView = {};Frame.save(NAME, oTableView);}var oSelf = oTableView[sId];if(!oSelf){oSelf = {};oTableView[sId] = oSelf;}oSelf[sName] = oInfo;},this.load = function(sName){var oTableView = Frame.load(NAME) || {};var oSelf = oTableView[sId] || {};return oSelf[sName];},this.clear = function(){var oTableView = Frame.load(NAME);if(oTableView){if(undefined != oTableView[sId]){delete oTableView[sId];}}}};function Progress(oParent, oContainer){function create(oContainer){};function start(){oContainer.innerHTML = '<IMG src="' + gMlist2Images["LOADING"] + '"/>';}function stop(){oContainer.innerHTML = '';}this.start = start;this.stop = stop;create.apply(this);}function ListQuery(oParent, oContainer, oDescription){var sQueryFieldListHTML;var oAdvancedQueryTypeSelectInnerHTML = {};var oSimpleQueryType = {string:"include", number:"equal"};var aColumns = oDescription.columns;var fnRestrict = null;var oDomDivQuery;var oDomDivQuerySimple;var oDomDivQueryAdvanced;var oDomInputTextQueryBox;var oDomSelectQueryField;var oDomInputButtonQuery;var oDomSpanQueryAdvanced;var aQueryRelation = {"equal": 		{text:oResource.RS_QUERY_EQUAL, test:function(m1,m2){return (m1 === m2)}},"notequal": 	{text:oResource.RS_QUERY_NOTEQUAL, test:function(m1,m2){return (m1 !== m2)}},"beginwith": 	{text:oResource.RS_QUERY_BEGINWITH, test:function(s1,s2){return new RegExp("^" + toRegExpString(s2) + ".*$").test(s1)}},"notbeginwith": {text:oResource.RS_QUERY_NOTBEGINWITH, test:function(s1,s2){return !new RegExp("^" + toRegExpString(s2) + ".*$").test(s1)}},"endwith": 		{text:oResource.RS_QUERY_ENDWITH, test:function(s1,s2){return new RegExp("^.*" + toRegExpString(s2) + "$").test(s1)}},"notendwith": 	{text:oResource.RS_QUERY_NOTENDWITH, test:function(s1,s2){return !new RegExp("^.*" + toRegExpString(s2) + "$").test(s1)}},"include": 		{text:oResource.RS_QUERY_INCLUDE, test:function(s1,s2){return new RegExp("^.*" + toRegExpString(s2) + ".*$").test(s1)}},"exclude": 		{text:oResource.RS_QUERY_EXCLUDE, test:function(s1,s2){return !new RegExp("^.*" + toRegExpString(s2) + ".*$").test(s1)}},"morethan": 	{text:oResource.RS_QUERY_MORETHAN, test:function(n1,n2){return (n1 > n2)}},"moreequal": 	{text:oResource.RS_QUERY_MOREEQUAL, test:function(n1,n2){return (n1 >= n2)}},"lessthan": 	{text:oResource.RS_QUERY_LESSTHAN, test:function(n1,n2){return (n1 < n2)}},"lessequal": 	{text:oResource.RS_QUERY_LESSEQUAL, test:function(n1,n2){return (n1 <= n2)}}};var oQueryConvertors = {string:function(s){return s.toString();}, number:function(s){return parseInt(s,10);}, ip:Frame.Util.ipToInteger};var oAdvancedQueryType = {"string":["equal", "notequal", "beginwith", "notbeginwith", "endwith", "notendwith", "include", "exclude"],"number":["equal", "notequal", "morethan", "moreequal", "lessthan", "lessequal"],"ip":["equal", "notequal", "morethan", "moreequal", "lessthan", "lessequal", "include", "exclude"]};var RestrictInfo = null;function makeQueryFieldListSelectInnerHTML(){var aInnerHTML = ['<SELECT>'];for(var i=0; i<aColumns.length; i++){(false !== aColumns[i].query) && aInnerHTML.push('<OPTION value="' + i + '">' + aColumns[i].text + '</OPTION>');}aInnerHTML.push('</SELECT>');return aInnerHTML.join("");}function makeHtml(){var aInnerHTML = [];aInnerHTML.push('<DIV class="TableView_simple">');aInnerHTML.push('<INPUT TYPE="text" class="TableView_querybox"/>');aInnerHTML.push(sQueryFieldListHTML);aInnerHTML.push('<INPUT TYPE="button" CLASS="buttonX" VALUE="' + oResource.SEARCH + '"/>');aInnerHTML.push('</DIV>');aInnerHTML.push('<DIV class="TableView_advanced">| <SPAN>'+oResource.RS_QUERY_ADVANCE+'</SPAN></DIV>');oContainer.innerHTML = aInnerHTML.join("");};function create(){if(!isSupport()){return;}sQueryFieldListHTML = makeQueryFieldListSelectInnerHTML();makeHtml();bindDomObj();for(var i in oAdvancedQueryType){oAdvancedQueryTypeSelectInnerHTML[i] = makeQueryConditionSelect(i);}var sTitle = "ListQuery";oParent.regCallBack(EID.CFG_RESTORE, onRestore, false, sTitle);oParent.regCallBack(EID.UPDATE_VIEW, onUpdateView, false, sTitle);};function isSupport(){return (false !== oDescription.query);}function bindDomObj(){oDomDivQuery = oContainer;oDomDivQuerySimple = oDomDivQuery.childNodes[0];oDomDivQueryAdvanced = oDomDivQuery.childNodes[1];oDomInputTextQueryBox = oDomDivQuerySimple.childNodes[0];oDomSelectQueryField = oDomDivQuerySimple.childNodes[1];oDomInputButtonQuery = oDomDivQuerySimple.childNodes[2];oDomSpanQueryAdvanced = oDomDivQueryAdvanced.childNodes[1];oDomInputButtonQuery.onclick = oDomInputButtonQuery_onclick;oDomSpanQueryAdvanced.onclick = oDomSpanQueryAdvanced_onclick;}var Query = {name: "query",runStatus: null,save: function(oInfo){RestrictInfo = oInfo;fnRestrict = oInfo ? function(oData){return restrictCb(oData);}: null;this.runStatus.save(this.name, oInfo);},restore: function(){var oInfo = this.runStatus.load(this.name);RestrictInfo = oInfo;return oInfo;},clear: function(){this.save(null);}};function onRestore(oRunStatus, nPhase){if(nPhase > 1){return EM.SKIP;}Query.runStatus = oRunStatus;var oInfo = Query.restore();if(!oInfo) return EM.SKIP;fnRestrict = restrictCb;return EM.OK;}function onUpdateView(){return ("no"===updateSimple()) ? EM.SKIP : EM.OK;}function toRegExpString(s){return (s + "").replace(/(\\|\^|\$|\*|\+|\?|\{|\}|\(|\)|\.|\||\[|\])/g,"\\$1");}function getRelation(sKey){return aQueryRelation[sKey]||{};}function makeQueryConditionSelect(sType){var aInnerHTML = ['<SELECT style="width:150px"><OPTION value=""></OPTION>'];var aOptionData = oAdvancedQueryType[sType];for(var i=0; i<aOptionData.length; i++){aInnerHTML.push('<OPTION value="' + aOptionData[i] + '">' + getRelation(aOptionData[i]).text + '</OPTION>');}aInnerHTML.push('</SELECT>');return aInnerHTML.join("");}function restrictCb(oResultantData){var oPara = RestrictInfo;if(!oPara){return true;}var bTest1, bTest2;var sData = oResultantData["data"][oPara.column];var sValue1 = oPara.con1.value;var sValue2 = oPara.con2.value;var fnConvert = oPara.convert;var fnTest1 = oPara.con1.test;var fnTest2 = oPara.con2.test;var bBoolAnd = oPara.isand;if(!oPara.matchCase){sData = sData.toLowerCase();sValue1 = sValue1.toLowerCase();sValue2 = sValue2.toLowerCase();}sData = fnConvert(sData);sValue1 = fnConvert(sValue1);bTest1 = fnTest1(sData, sValue1);if(!fnTest2){return bTest1;}sValue2 = fnConvert(sValue2);bTest2 = fnTest2(sData, sValue2);return (bBoolAnd?(bTest1 && bTest2):(bTest1 || bTest2));}function makeSimpleRestrict(nColumn, sValue){var sType = aColumns[nColumn].type;(!(sType in oSimpleQueryType)) && (sType = "string");var opt1 = oSimpleQueryType[sType];var test1 = getRelation(oSimpleQueryType[sType]).test;var oInfo = {column: nColumn,	convert: oQueryConvertors[sType],	matchcase: false,	inresult: false,	isand: true,		con1:{opt:opt1,value:sValue,test:test1},con2:{opt:0,value:"",test:null}			}return oInfo;}function updateSimple(){var oInfo = RestrictInfo;if(!oInfo){oDomInputTextQueryBox.value = "";return "no";}var bSimple = false;var sType = aColumns[oInfo.column].type;var sOpt = oInfo.con1.opt;bSimple = ( (("number" == sType) && ("equal"==sOpt))	|| ("include"==sOpt) 						);oDomSelectQueryField.value = oInfo.column;oDomInputTextQueryBox.value = bSimple ? oInfo.con1.value : "";return bSimple ? "yes" : "ignore";}function oDomInputButtonQuery_onclick(){var sValue = oDomInputTextQueryBox.value.toLowerCase();if("" == sValue){Query.clear();}else{var nColumn = parseInt(oDomSelectQueryField.value, 10);var oInfo = makeSimpleRestrict(nColumn, sValue);Query.save(oInfo);}showPage();}function oDomSpanQueryAdvanced_onclick(){var oFloatWinow = Frame.Widget.FWindow.open(Frame.Widget.FWindow.CUSTOM_WINDOW,OnQueryAdvanced,{title:oResource.RS_QUERY_ADVANCE});var oDomFloatWinowContainer = oFloatWinow.getInfoContent();var aInnerHTML = ['<DIV style="margin:0px 0px 5px 0px">' + sQueryFieldListHTML + '</DIV>'];aInnerHTML.push('<DIV><DIV style="display:inline"><SELECT style="width:150px"></SELECT></DIV><INPUT style="margin:0px 0px 0px 10px"/></DIV>');aInnerHTML.push('<DIV><INPUT type="radio" name="bool" checked="checked"/>'+ oResource.RS_QUERY_AND +'<INPUT type="radio" name="bool"/>'+ oResource.RS_QUERY_OR +'</DIV>');aInnerHTML.push('<DIV><DIV style="display:inline"><SELECT style="width:150px"></SELECT></DIV><INPUT style="margin:0px 0px 0px 10px"/></DIV>');aInnerHTML.push('<DIV><INPUT type="checkbox"/>'+oResource.RS_QUERY_MATCHCASE+'</DIV>');aInnerHTML.push('<DIV><INPUT type="checkbox"/>'+oResource.RS_QUERY_RESULT+'</DIV>');oDomFloatWinowContainer.innerHTML = aInnerHTML.join("");oFloatWinow.showWindow();var oDomSelectQueryField = oDomFloatWinowContainer.childNodes[0].childNodes[0];var oDomDivContainerRelation1 = oDomFloatWinowContainer.childNodes[1].childNodes[0];var oDomInputText1 = oDomFloatWinowContainer.childNodes[1].childNodes[1];var oDomAndOr = oDomFloatWinowContainer.childNodes[2];var oDomInputRadioAnd = oDomAndOr.childNodes[0];var oDomInputRadioOr = oDomAndOr.childNodes[2];;var oDomDivContainerRelation2 = oDomFloatWinowContainer.childNodes[3].childNodes[0];var oDomInputText2 = oDomFloatWinowContainer.childNodes[3].childNodes[1];var oDomInputCheckboxMatchCase = oDomFloatWinowContainer.childNodes[4].childNodes[0];var oDomInputCheckboxQueryInResult = oDomFloatWinowContainer.childNodes[5].childNodes[0];oDomSelectQueryField.onchange = function(){var nColumn = parseInt(this.value, 10);var sType = aColumns[nColumn].type;(!(sType in oAdvancedQueryType)) && (sType = "string");oDomDivContainerRelation1.innerHTML = oDomDivContainerRelation2.innerHTML = oAdvancedQueryTypeSelectInnerHTML[sType];}function updateAdv(){var oInfo = RestrictInfo;if(!oInfo){oDomSelectQueryField.onchange();return false;}oDomSelectQueryField.value = oInfo.column;oDomInputCheckboxMatchCase.checked = oInfo.matchcase;oDomInputCheckboxQueryInResult.checked = oInfo.inresult;oDomSelectQueryField.onchange();var cond = oInfo.con1;oDomInputText1.value = cond.value;oDomDivContainerRelation1.firstChild.value = cond.opt;	if(oInfo.con2){cond = oInfo.con2;oDomDivContainerRelation2.firstChild.value = cond.opt;oDomInputText2.value = cond.value;!oInfo.isand && (oDomInputRadioOr.checked=true);}return true;}function makeAdvRestrict(){var opt1 = oDomDivContainerRelation1.firstChild.value;var opt2 = oDomDivContainerRelation2.firstChild.value;var value1 = oDomInputText1.value;var value2 = oDomInputText2.value;if("" == value1){return null;}var nColumn = parseInt(oDomSelectQueryField.value, 10);var sType = aColumns[nColumn].type;(!(sType in oSimpleQueryType)) && (sType = "string");var test1 = getRelation(opt1).test;var test2 = getRelation(opt2).test;var oInfo = {column: nColumn,	convert: oQueryConvertors[sType],	matchcase: oDomInputCheckboxMatchCase.checked,	inresult: oDomInputCheckboxQueryInResult.checked,	isand: oDomInputRadioAnd.checked,			con1:{opt:opt1,value:value1,test:test1},	con2:{opt:opt2,value:value2,test:test2}	}return oInfo;}function OnQueryAdvanced(){var sRelation1 = oDomDivContainerRelation1.firstChild.value;var sRelation2 = oDomDivContainerRelation2.firstChild.value;if("" == sRelation1){if("" != sRelation2){alert(oResource.RS_SORT_ERR_EMPTY);return;}Query.clear();}else{var oInfo = makeAdvRestrict();(null == oInfo) ? Query.clear() : Query.save(oInfo);}showPage();}updateAdv();}function showPage(){oParent.notify(EID.QUERY_CHANGE);oParent.notify(EID.UPDATE_VIEW);}this.getRestrictFn = function(){return fnRestrict;};create.apply(this);}function Pagination(oParent, oContainer, sId){var nPage=0, nPageSize=15, nDataCount=0;var bUpdateGogoPage = false;var runStatus;var bRestoreing =false;var sGlobalId = sId;	var aPageSize = [5, 10, 15, 20, 30, 50, 100];var oPageSize = {};var oDomDivPagination;var oDomSpanPageTotal;var oDomSelectPageSize;var oDomSpanPageSize;var oDomInputButtonFirst;var oDomInputButtonPrevious;var oDomInputButtonNext;var oDomInputButtonLast;var oDomInputTextGoPageNumber;var oDomInputButtonGoPage;function makeHtml(){var aInnerHTML = [];aInnerHTML.push('<SPAN></SPAN><SELECT>');for(var i=0; i<aPageSize.length; i++){aInnerHTML.push('<OPTION value="' + aPageSize[i] + '">' + aPageSize[i] + '</OPTION>');}aInnerHTML.push('</SELECT><SPAN></SPAN>');aInnerHTML.push('<INPUT TYPE="button" CLASS="page_link_disable" VALUE="' + oResource.RS_PAGE_FIRST + '"/>');aInnerHTML.push('<INPUT TYPE="button" CLASS="page_link_disable" VALUE="' + oResource.RS_PAGE_PREV + '"/>');aInnerHTML.push('<INPUT TYPE="button" CLASS="page_link_disable" VALUE="' + oResource.RS_PAGE_NEXT + '"/>');aInnerHTML.push('<INPUT TYPE="button" CLASS="page_link_disable" VALUE="' + oResource.RS_PAGE_END + '"/>');aInnerHTML.push('<INPUT TYPE="text" VALUE="1" MAXLENGTH="5" SIZE="5" EMPTY="true"/>');aInnerHTML.push('<INPUT TYPE="button" CLASS="buttonX" VALUE="' + oResource.RS_PAGE_GO + '"/>');oContainer.innerHTML = aInnerHTML.join("");};function create(){oDomDivPagination = oContainer;show(false);	makeHtml();bindDomObj();nPageSize = getPageSize(sGlobalId);oDomSelectPageSize.value = nPageSize;for(var i=0; i<aPageSize.length; i++){oPageSize["s"+aPageSize[i]] = i;};var sTitle = "Pagination";oParent.regCallBack(EID.CFG_RESTORE, onRestore, false, sTitle);oParent.regCallBack(EID.UPDATE_VIEW, onUpdateView, false, sTitle);oParent.regCallBack(EID.QUERY_CHANGE, onSearchChange, false, sTitle);oParent.regCallBack(EID.DATA_CHANGE, onDataChange, false, sTitle);oParent.regCallBack(EID.LOADE_COMPLEATE, onLoadComplete, false, sTitle);};function show(bShow){var sShow = bShow ? "" : "none";oDomDivPagination.style.display = sShow;}function save(oInfo){if(true === bRestoreing){return;}runStatus && runStatus.save("page", oInfo);}function onRestore(oRunStatus, nPhase){if(nPhase > 1){bRestoreing = false;return EM.SKIP;}bRestoreing = true;runStatus = oRunStatus;nPage = oRunStatus.load("page") || firstPage();bUpdateGogoPage = true;return EM.OK;}function onSearchChange(){nPage = firstPage();nDataCount = 0;bUpdateGogoPage = true;return EM.OK;}function onDataChange(nTotal){nDataCount = nTotal;return EM.OK;}function onUpdateView(){updatePage(nDataCount);return EM.OK;}function onLoadComplete(){var n = nPage;if(n>=firstPage() && n<=lastPage()){return EM.SKIP;}n = Math.max(n,firstPage());n = Math.min(n, lastPage());nPage = n;save(nPage);oParent.notify(EID.UPDATE_VIEW);return EM.OK;}function savePageSize(sId, nSize){nSize = nSize||aPageSize[2];if(Frame.Util.cookie.isSupport()){if(confirm(oResource.RS_PAGE_CHANGESIZE)){Frame.Util.cookie.write("mlist2_pagesize", nSize, {path:"/",y:1});Frame.Util.cookie.remove("mlist2_pagesize_list",{path:"/"});}else{var sPageSizeList = Frame.Util.cookie.read("mlist2_pagesize_list");var oPageSizeList = ("" != sPageSizeList)?Frame.Util.JSON.getObject(sPageSizeList):{};oPageSizeList[sId] = nSize;Frame.Util.cookie.write("mlist2_pagesize_list", Frame.Util.JSON.serialize(oPageSizeList), {path:"/",y:1});}}}function getPageSize(sId){var nSize = aPageSize[2];if(Frame.Util.cookie.isSupport()) {	var sGlobalPageSize = Frame.Util.cookie.read("mlist2_pagesize");var sPageSizeList = Frame.Util.cookie.read("mlist2_pagesize_list");if(sGlobalPageSize != "") nSize = parseInt(sGlobalPageSize, 10);if(sPageSizeList != ""){var oPageSizeList = Frame.Util.JSON.getObject(sPageSizeList);if(oPageSizeList && oPageSizeList[sId] && (("s" + oPageSizeList[sId]) in oPageSize)){nSize = parseInt(oPageSizeList[sId], 10);}}}return nSize;}function bindDomObj(){oDomSpanPageTotal = oDomDivPagination.childNodes[0];oDomSelectPageSize = oDomDivPagination.childNodes[1];oDomSpanPageSize = oDomDivPagination.childNodes[2];oDomInputButtonFirst = oDomDivPagination.childNodes[3];oDomInputButtonPrevious = oDomDivPagination.childNodes[4];oDomInputButtonNext = oDomDivPagination.childNodes[5];oDomInputButtonLast = oDomDivPagination.childNodes[6];oDomInputTextGoPageNumber = oDomDivPagination.childNodes[7];oDomInputButtonGoPage = oDomDivPagination.childNodes[8];oDomInputButtonFirst.onclick = function(){showPage(firstPage());}oDomInputButtonPrevious.onclick = function(){showPage(nPage-1);}oDomInputButtonNext.onclick = function(){showPage(nPage+1);}oDomInputButtonLast.onclick = function(){showPage(lastPage());}oDomInputButtonGoPage.onclick = function(){showPage(parseInt(oDomInputTextGoPageNumber.value,10)-1);}oDomSelectPageSize.onchange = function(){nPageSize = parseInt(this.value, 10);savePageSize(sGlobalId, nPageSize);showPage(nPage);}}function firstPage(){return 0;}function lastPage(){return Math.max(0, Math.ceil(nDataCount/nPageSize)-1);}function showPage(n){n = Math.max(n,firstPage());n = Math.min(n, lastPage());nPage = n;bUpdateGogoPage = true;save(nPage);oParent.notify(EID.UPDATE_VIEW);}function updatePage(nTotal){var nPosPageStart = nPageSize*nPage;var nPosPageNextStart = nPosPageStart + nPageSize;var nCurrent = Math.min(nTotal, nPosPageNextStart); var nMaxPage = Math.ceil(nTotal/nPageSize);oDomSpanPageTotal.innerHTML = sprintf(oResource.RS_PAGE_TOTAL, nTotal);oDomSpanPageSize.innerHTML = sprintf(oResource.RS_PAGE_SIZE, nPage + 1, nMaxPage, nPosPageStart + 1, Math.min(nTotal, nPosPageNextStart));var bFirstPage = (firstPage() == nPage);var bLastPage = (lastPage() == nPage);oDomInputButtonFirst.disabled = oDomInputButtonPrevious.disabled = bFirstPage;oDomInputButtonFirst.className = oDomInputButtonPrevious.className = (bFirstPage?"page_link_disable":"mlist_page_link");oDomInputButtonNext.disabled = oDomInputButtonLast.disabled = bLastPage;oDomInputButtonNext.className = oDomInputButtonLast.className = (bLastPage?"page_link_disable":"mlist_page_link");show((nTotal > aPageSize[0]));if(bUpdateGogoPage){bUpdateGogoPage = false;oDomInputTextGoPageNumber.value = (nPage + 1);}}function getInfo(){var oInfo = {cur: nPage,size: nPageSize};return oInfo;}this.getInfo = getInfo;create.apply(this);}function SortMan(oParent, oContainer, oDescription){var aColumns = oDescription.columns;var fnCompare = null;var runStatus;var oSortInfo = null;	var bRestoreing = false;function create(){addSortEventHandler();var sTitle = "SortMan";oParent.regCallBack(EID.CFG_RESTORE, onRestore, false, sTitle);oParent.regCallBack(EID.UPDATE_VIEW, onUpdateView, false, sTitle);oParent.regCallBack(EID.QUERY_CHANGE, onSearchChange, false, sTitle);oParent.regCallBack(EID.DO_SORT, onSort, false, sTitle);};function isSupportSort(oColumn){return (true === oColumn.sort);}function addSortEventHandler(){var oDomSort = null;var oTr = oContainer;for(var i=0; i<aColumns.length; i++){if(!isSupportSort(aColumns[i])){continue;}var oTd = oTr.childNodes[i];var oSpanText = oTd.firstChild;oSpanText.className = "sort-on";oSpanText.column = i;oSpanText.onclick = onSortClick;}oTr = null;}function onSortClick(){if(true !== procSort(this.column)){return ;}save(oSortInfo, true);oParent.notify(EID.UPDATE_VIEW);}var SortOrder = {"normal":"ascending", "ascending":"descending", "descending":"ascending"};var SortMap = {"normal":0, "ascending":1, "descending":-1};var SortHtml = {"normal":'', "ascending":'<IMG src="'+BASE_PATH+'images/sort_asc_first.gif"/>', "descending":'<IMG src="'+BASE_PATH+'images/sort_desc_first.gif"/>'};function setSortImg(sImg){var nColumn = oSortInfo.column;var oTr = oContainer;var oTd = oTr.childNodes[nColumn];var oSpanText = oTd.firstChild;var oDomSort = oSpanText.nextSibling;oDomSort.innerHTML = sImg;}function preSort(i, sOrder){var nSignFactor = SortMap[sOrder];var oColumn = aColumns[i];if((undefined == nSignFactor) || (!oColumn) ){return false;}function _pubCompare(oData1, oData2){var nResult = 0;var data1 = oData1["sort"][i];var data2 = oData2["sort"][i];if(data1 > data2){nResult = 1;}else if(data1 < data2){nResult = -1;}else{nResult = 0;}return nResult;};fnCompare = function(oData1, oData2){var fn = oColumn.compare||_pubCompare;var nResult = fn(oData1, oData2);return (nResult*nSignFactor);};return true;}function clearSort(){setSortImg("");oSortInfo = null;}function clearAll(){clearSort();fnCompare = null;save(null);}function procSort(i){if(oSortInfo && oSortInfo.column != i){clearSort();}var sOder = (oSortInfo) ? oSortInfo.order : "normal";var sNewOrder = SortOrder[sOder];if(true !== preSort(i, sNewOrder)){return false;}oSortInfo = {column:i, order:sNewOrder};return true;};function save(oInfo, bForce){if((true === bRestoreing) && (true!==bForce) ){return;}runStatus.save("sort", oInfo);}function onRestore(oRunStatus, nPhase){if(1 == nPhase){bRestoreing = true;runStatus = oRunStatus;return EM.OK;}bRestoreing = false;var oInfo = oRunStatus.load("sort");if(!oInfo) return EM.SKIP;if(!isSupportSort(aColumns[oInfo.column])){return EM.SKIP;}if(true !== preSort(oInfo.column, oInfo.order)){return EM.SKIP;}oSortInfo = oInfo;return EM.OK;}function onUpdateView(){if(!oSortInfo){return EM.SKIP;}setSortImg(SortHtml[oSortInfo.order]||'');return EM.OK;}function onSearchChange(){clearAll();return EM.OK;}function onSort(column, sOrder){if(!isSupportSort(aColumns[column])){return EM.SKIP;}if(true !== preSort(column, sOrder)){return EM.SKIP;}oSortInfo = {column:column, order:sOrder}; return EM.OK;}this.getCompareFn = function(){return fnCompare;};create.apply(this);}function Buttons(oParent, oContainer, oDescription){function makeHtml(){var aInnerHTML = [];var aItems = getOperationButtonItems(oDescription);for(var i = 0 ; i< aItems.length; i++){aInnerHTML.push('<INPUT type="button" class="buttonX" value="' + aItems[i].text + '"/>');}oContainer.innerHTML = aInnerHTML.join("");};function create(){makeHtml();var aItems = getOperationButtonItems(oDescription);for(var i = 0 ; i< aItems.length; i++){aItems[i].action&&(oContainer.childNodes[i].onclick = aItems[i].action);};};function getOperationButtonItems(oDescription){var oDesc = oDescription["operations"];var aItems = [], aAvailableItems = [];if(oDesc&&(aItems = oDesc["button"])){for(var i=0; i< aItems.length; i++){var fnRestrict = aItems[i].restrict;isRoleUser(aItems[i]["role"]||oDesc["role"]) && ((null == fnRestrict) || (false !== fnRestrict())) && aAvailableItems.push(aItems[i]);}}return aAvailableItems;}create.apply(this);}function TableDB(win, oDescription, fnNotify){var aColumns = oDescription.columns;var aColumnsInfo = [];for(var i=0; i< aColumns.length; i++){var oColumn = aColumns[i];if("string" == typeof oColumn.data){aColumnsInfo.push(getDataDescription(oColumn.data));}else{aColumnsInfo.push(oColumn.data);}}function makeData(oRaw, oData){for(var i=0; i< aColumns.length; i++){var oColumn = aColumns[i];if("string" == typeof oColumn.data){var oDataDescription = aColumnsInfo[i];var oRawTable = oRaw[oDataDescription.table];("main" != oDataDescription.table)&&(oRawTable = oRawTable[0]);oRawTable && (oData[i] = oRawTable[oDataDescription.field]);}else{oData[i] = oColumn.data.call(oRaw);}if(null != oColumn.name){oData[oColumn.name] = oData[i];}}}function sortPretreat(oData, oSort){for(var i=0; i< aColumns.length; i++){var oColumn = aColumns[i];if(true !== oColumn.sort || true === oColumn.compare){continue;}var fnSortConvert = oColumType[oColumn.type||"string"]||oColumType["string"];(null != oData[i]) && (oSort[i] = fnSortConvert(oData[i]));}}var db = new Frame.Widget.DataBase(oDescription.data, makeData, sortPretreat, win);db.ondatastatechange = function(){var bComplete = (this.cur == this.max);fnNotify&&fnNotify(bComplete, this.count);};return db;}var bClearRunStatus = false;Frame.regOnload(function(){bClearRunStatus = !((ACTION_FROM_NORMAL == g_ActionFrom)||(ACTION_FROM_AUTO & g_ActionFrom));});TableView.prototype = new EM();TableView.prototype.NAME = "TableView";function TableView(oDomContainer, oDescription, oOption){var win = Frame.Util.getWindowByElement(oDomContainer);try{win.document.execCommand("BackgroundImageCache", false, true);}catch(e){};var sGlobalId = (win.TABID||"") + "_" + (oDescription.id||"0");var aDataRaw = [];var aData = [];var aDataLast = [];var aColumns = oDescription.columns;var oColumnitems = null;var oThis = this;var oRunStatus, oProgress;var oDataBase;	var oPage,oQuery,oSort,oButtons;var oDomDivBody ;function makeTableHeadInnerHTML(){var oDesc = oDescriptionvar aInnerHTML = [];aInnerHTML.push('<THEAD><TR>');for(var i=0; i<aColumns.length; i++){aInnerHTML.push('<TH width="'+ aColumns[i].width +'"><SPAN UNSELECTABLE="on" >' + aColumns[i].text + '</SPAN><SPAN></SPAN></TH>');}if(oColumnitems.length > 0){aInnerHTML.push('<TH width="80px"><SPAN>');aInnerHTML.push(oDesc["operations"].text);aInnerHTML.push('</SPAN></TH>');}aInnerHTML.push('</TR></THEAD>');return aInnerHTML.join("");}function makeHtml(){var aInnerHTML = ['<DIV class="TableView">'];aInnerHTML.push('<DIV class="TableView_head"><TABLE><TBODY><TR>');aInnerHTML.push('<TD><DIV class="TableView_query"></DIV></TD>');	aInnerHTML.push('<TD>&nbsp;</TD>');	aInnerHTML.push('<TD><DIV class="TableView_loading"></DIV></TD>');	aInnerHTML.push('</TR></TBODY></TABLE></DIV>');	aInnerHTML.push('<DIV class="TableView_body"><TABLE>' + makeTableHeadInnerHTML() + '</TABLE></DIV>');aInnerHTML.push('<DIV class="TableView_tail">');aInnerHTML.push('<DIV class="TableView_pagination"></DIV>');	aInnerHTML.push('<DIV CLASS="TableView_operation"></DIV>');		aInnerHTML.push('</DIV>');aInnerHTML.push('</DIV>');oDomContainer.innerHTML = aInnerHTML.join("");}function create(){var oContPage, oContSort, oContQuery, oContButtons, oContLoading;oColumnitems = getOperationColumnItems();makeHtml();var oDomDivTableView = oDomContainer.firstChild;var oDomDivHead = oDomDivTableView.firstChild;oDomDivBody = oDomDivHead.nextSibling;	var oDomDivTail = oDomDivBody.nextSibling;var oHeadRow = oDomDivHead.firstChild.rows[0];oContQuery = oHeadRow.cells[0].firstChild;oContLoading = oHeadRow.cells[2].firstChild;oContSort = oDomDivBody.firstChild.rows[0];oContPage = oDomDivTail.firstChild;		oContButtons = oContPage.nextSibling;	oRunStatus = new RunStatus(sGlobalId);oDataBase = new TableDB(win, oDescription, onDataStateChange);oPage = new Pagination(oThis, oContPage, sGlobalId);oQuery = new ListQuery(oThis, oContQuery, oDescription);oSort = new SortMan(oThis, oContSort, oDescription);otButtons = new Buttons(oThis, oContButtons, oDescription);oProgress = new Progress(oThis, oContLoading, oDescription);bClearRunStatus && oRunStatus.clear();oThis.regCallBack(EID.UPDATE_VIEW, onUpdateView, false, oThis);oProgress.start();oThis.notify(EID.CFG_RESTORE, oRunStatus, 1);show();}function show() {var oPageInfo = oPage.getInfo();var nPage = oPageInfo.cur;var nSize = oPageInfo.size;var aData = oDataBase.get(nPage*nSize, nSize, oQuery.getRestrictFn(), oSort.getCompareFn());var bDataChange = !isEqual(aDataLast, aData);if(bDataChange){drawTable(oDomDivBody, aData);aDataLast = aData;}}var bRestored = false;function restore(){if(false !== bRestored){return;}bRestored = true;oThis.notify(EID.CFG_RESTORE, oRunStatus, 2);}function onUpdateView(){show();return EM.OK;}function getOperationColumnItems(){var oDesc = oDescription["operations"];var aItems;var oColumns = [];if(oDesc&&(aItems = oDesc["operation"])){for(var i=0; i< aItems.length; i++){isRoleUser(aItems[i]["role"]||oDesc["role"]) && oColumns.push(aItems[i]);}}return oColumns;}function makeTableOperationHtml(oOptColumnMap, aInnerHTML, oData, j){var aOperationColumnItems = oColumnitems;if(0==aOperationColumnItems.length){return;}aInnerHTML.push('<TD><DIV>');for(var i = 0 ; i< aOperationColumnItems.length; i++) {var fn = aOperationColumnItems[i].restrict;if(!fn || (false !== fn.apply(oData))){oOptColumnMap["s" + j].push(aOperationColumnItems[i]);if((aOperationColumnItems[i].type in oOperateTypes)) {aInnerHTML.push('<SPAN class="page_link"><IMG alt="'+aOperationColumnItems[i].name+ '" title="'+aOperationColumnItems[i].description+ '" src="'+oOperateTypes[aOperationColumnItems[i].type].img+ '"></IMG></SPAN>');}}}aInnerHTML.push('</DIV></TD>');}function makeTableHtml(oAvailableOperationColumnMap, aData){var aInnerHTML = ['<TABLE><TBODY>'];for(var j=0; j< aData.length; j++){aInnerHTML.push('<TR class="'+ ['row135','row246'][j%2] +'">');for(var i=0; i<aColumns.length; i++){aInnerHTML.push('<TD>' + (aColumns[i].make?aColumns[i].make.call(aData[j]):aData[j]["data"][i]) + '</TD>');}oAvailableOperationColumnMap["s" + j] = [];makeTableOperationHtml(oAvailableOperationColumnMap, aInnerHTML, aData[j], j);aInnerHTML.push('</TR>');}aInnerHTML.push('</TBODY></TABLE>');return aInnerHTML.join("");}function drawTable(oDomDivBody, aData){var oAvailableOperationColumnMap = {};var oDomDiv = win.document.createElement("DIV");oDomDiv.innerHTML = makeTableHtml(oAvailableOperationColumnMap, aData); var oDomFragment = win.document.createDocumentFragment();oDomFragment.appendChild(oDomDiv.firstChild.firstChild);var oDomTable = oDomDivBody.firstChild;(oDomTable.childNodes.length>1)&&oDomTable.removeChild(oDomTable.childNodes[oDomTable.childNodes.length-1]);oDomTable.appendChild(oDomFragment);oDomDiv = null;oDomFragment = null;var nOptCol = aColumns.length;var oTable = oDomDivBody.firstChild;for(var j=0; j< aData.length; j++){var aItems = oAvailableOperationColumnMap["s" + j]; var oDomDivOperate = oTable.rows[j+1].cells[nOptCol].firstChild;for(var i=0; i<aItems.length; i++){if(aItems[i].type in oOperateTypes){oDomDivOperate.childNodes[i].onclick=(function(fnAction, oData){return (function(){fnAction&&fnAction.apply(oData);});})(aItems[i].action, aData[j]);}}oDomDivOperate = null;}oTable = null;}function onDataStateChange(bComplete, nCount){oThis.notify(EID.DATA_CHANGE, nCount);if(bComplete){oProgress.stop();oThis.notify(EID.LOADE_COMPLEATE);restore();}oThis.notify(EID.UPDATE_VIEW);}create();this.sort = function(column, sOrder){if(0 === oThis.notify(EID.DO_SORT, column, sOrder)){return false;}oThis.notify(EID.UPDATE_VIEW);return true;};}preLoadImg();Frame.Widget.TableView = TableView;})();