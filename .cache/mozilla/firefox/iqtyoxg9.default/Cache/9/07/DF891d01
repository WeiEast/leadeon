var MRedirect;if (MRedirect && (typeof MRedirect != "object" || MRedirect.NAME))throw new Error("Namespace 'MRedirect' already exists");MRedirect = {};MRedirect.NAME = "MRedirect";MRedirect.VERSION = "0.1";(function(){var win = [];MRedirect.CheckAndFocus = function(sName){var w;if(!sName){sName = "winredi_s";}w = win[sName];if(w && !w.closed){w.focus();return true;}return false;};MRedirect.OpenWindow = function(sUrl,sName){if(!sName){sName = "winredi_s";}win[sName] = window.open(sUrl,sName);}})();var __Private_RealTop__ = true;var ACTION_FROM_NORMAL = 0;var ACTION_FROM_MENU = 1;var ACTION_FROM_TAB = 2;var ACTION_FROM_AUTO = 4;var g_ActionFrom = ACTION_FROM_NORMAL;var CtrlWindow, MenuWindow, FrmSubmit;var __Private_TopTarget__ = "mainframe";var bFastBackup = false;var bPanelSupport = false;function checkPanelSupport(){return bPanelSupport;}function IsMainWindow(win){return win.name == GetCtrlWindow().name;}function makeAttributeHtml(sName, sValue){if ( sValue==null || sValue.length==0)return "";return " " + sName + "=\"" + sValue + "\"";}function isAction(sAction){if ( sAction==null || sAction.length==0)return false;var n = sAction.indexOf("::");return n!=-1;}function getActionProtocal(sAction){var n = sAction.indexOf("::");var sProtocal = sAction.substring(0,n);sProtocal.toLowerCase();return sProtocal;}function getActionValue(sAction){var n = sAction.indexOf("::");n += 2;return sAction.substring(n);}function isDynUrl(sActionValue){return sActionValue.indexOf("/wcn/")!=-1;}var _g_bIsLoading = false;var _g_current_win = null;var _g_current_action = null;var _g_next_win = null;var _g_next_action = null;function haveNextAction(){return (null != _g_next_action);}function doNextAction(){if(null == _g_next_action){return false;}_g_current_win = _g_next_win;_g_current_action = _g_next_action;_g_next_win = null;_g_next_action = null;_g_bIsLoading = true;return doAction(_g_current_win, _g_current_action);}function clearAction(){_g_bIsLoading = false;    _g_current_win = null;    _g_current_action = null; _g_next_win = null;       _g_next_action = null;}doMenuAction.bUserLoadingPage = true;function doMenuAction(win, sAction){if(-1 == sAction.indexOf("doTabAction") && true===doMenuAction.bUserLoadingPage){doMenuAction.sAction = sAction;sAction = "url::/html/load.html";}g_ActionFrom |= ACTION_FROM_MENU;top.SetCtrlWindow(top.content.mainframe);top.__Private_TopTarget__ = "mainframe";if(true == _g_bIsLoading){   if(_g_current_win == win && _g_current_action == sAction){_g_next_win = null;_g_next_action = null;        	}else {_g_next_win = win;_g_next_action = sAction;}return false;}else {_g_current_win = win;_g_current_action = sAction;_g_next_win = null;   _g_next_action = null;return doAction(win, sAction);}}function doAction(win, sAction){function MakeLocalFile(sUrl){var ex, fso, f, r, fn, sNewUrl=null;var ne=sUrl.indexOf("?");var ns=sUrl.indexOf("wcn/");var sSingUrl = (ne>0)?sUrl.substring(ns,ne):sUrl.substring(ns);try{fn = ROOT_PATH + "..\\url.ini";fn = fn.substring("file:///".length).replace(/\//g,"\\");var ForReading = 1, ForWriting = 2;fso = new ActiveXObject("Scripting.FileSystemObject");f = fso.OpenTextFile(fn, ForReading);r =  f.ReadAll();f.close();var sLines = r.split("\r\n");var nLen = sLines.length;for(i=0; i<nLen; i++){var sTemp = sLines[i];var arr = sTemp.split("=");if((2 == arr.length) && (arr[0] == sSingUrl)){sNewUrl = arr[1];break;}}}catch(ex){}if(null == sNewUrl){sNewUrl = sUrl.substring(2);var sExt = sUrl.substring(sUrl.length-2);sExt = (".x" == sExt) ? "ml" : (".h" == sExt) ? "tm" : ".html";sNewUrl = sNewUrl + sExt;}sNewUrl = top.ROOT_PATH + top.g_LANG + sNewUrl.substring(2);return sNewUrl;}if ( !isAction(sAction) )return false;var sProtocal = getActionProtocal(sAction);if ( sProtocal=="js" ){return eval(getActionValue(sAction));}if ( sProtocal=="wjs" ){return eval("win."+getActionValue(sAction));}if ( sProtocal=="url" ){var sActionValue = getActionValue(sAction);var sUrl = sActionValue;if(isDynUrl(sUrl)){sUrl = WnmGetUrlWithUID(sActionValue);if(top.localRun){sUrl = MakeLocalFile(sUrl);}}else{sUrl = sUrl.replace("[lang]", top.g_LANG);if(sUrl.indexOf("/"+top.g_LANG) != -1 ) {sUrl = top.ROOT_PATH + sUrl.substring(1);}}if ( win.location!=null ){top.DebugMsgBox("location="+sUrl);win.location = sUrl;}else if ( win.src!=null ){top.DebugMsgBox("src="+sUrl);win.src = sUrl;}else{top.DebugMsgBox("doAction error");return false;}return true;}top.ASSERT(false,"Undifined protocal: "+sProtocal);return false;}function PubUrlAddParameter(sURL, sName, sValue){var sNewURL;var sSeperator = sURL.indexOf("?")>0 ? "&" : "?";sNewURL = sURL+sSeperator+sName+"="+sValue;return sNewURL ;}function getSelectedCount(oSelect){var i;var nSelCount = 0;for ( i=0; i<oSelect.options.length; i++){var oOption = oSelect.options[i];if ( !oOption.selected )continue;if ( oOption.value=="" )continue;nSelCount++;}return nSelCount;}function QueryInterface(sIID){try{return eval(sIID);}catch(ex){return null;}}function CheckPage(sId){var oItem = MenuWindow.g_oTreeRoot.GetItem(sId);return (null != oItem);}function CheckSpec (sSpecFlagStr){if (true == top.MenuWindow.g_arrSpec[sSpecFlagStr]){return true;}return false;}function ConvertIntfName2SpecName (sIntfName){if (null == sIntfName){return null;}var aszRegIntfName = top.MenuWindow.g_aszIntfName;var ulCount = aszRegIntfName.length - 1;for (var i = 0; i < ulCount; i++){var szRegName = aszRegIntfName[i];if (-1 != sIntfName.search (szRegName)){var szSpecName = top.MenuWindow.g_aszSpecIntfName[i];return sIntfName.replace (szRegName, szSpecName);}}return sIntfName;}function ConvertSpecName2IntfName (sSpecName){if (null == sSpecName){return null;}var aszSpecName = top.MenuWindow.g_aszSpecIntfName;var ulCount = aszSpecName.length - 1;for (var i = 0; i < ulCount; i++){var szRegName = aszSpecName[i];if (-1 != sSpecName.search (szRegName)){var szIntfName = top.MenuWindow.g_aszIntfName[i];return sSpecName.replace (szRegName, szIntfName);}}return sSpecName;}var g_UID;var WnmInfor = new Object();function WnmGetUID(){return WnmInfor.uid;}function WnmSetUID(sUID){WnmInfor.uid = sUID;g_UID=sUID;}function WnmGetLang(){return WnmInfor.language;}function WnmSetLang(sLanguage){WnmInfor.language = sLanguage;}function WnmGetVersion(){return WNM_VERSION;};function WnmGetLevel(nLevel){return WnmInfor.level;}function WnmGetUser(){return WnmInfor.sUser;}function WnmSetUser(sUser){WnmInfor.sUser = sUser;}function WnmGetPageLocation(win){var path = win.location.href.replace(/\?.*/g,"");path = path.replace(/#/g,"");path = path.replace(/(\w+):[\/]{2}[^\/]+/,"");return path;}function WnmIsInMainFrameWindow(win){var w = win;while(top != w){if("mainframe" == w.name) return true;else w = w.parent;}return false;}if (top.tempVar == undefined )top.tempVar = new Object();function WnmGetUrlWithUID(sUrl){if(sUrl.indexOf("?uid=")==-1 && sUrl.indexOf("&uid=")==-1){sUrl = PubUrlAddParameter(sUrl,"uid",WnmInfor.uid);}return sUrl;}function WnmSetLevel(nLevel){if ( nLevel<0 || nLevel>3 )nLevel = 0;WnmInfor.level = nLevel;return true;}function WnmSetTitle(sTitle){try{sTitle = sTitle.replace(/</g,"&lt;").replace(/&/g,"&amp;");g_TITLE = sTitle;document.getElementById("titleBar").innerHTML = sTitle;g_sProduct = g_TITLE;	}catch ( e ){top.exceptionReport("WnmSetTitle: "+e);};}function gotoPage(nPage){if(!top.Frame.gotoTabPage(GetCtrlWindow(), nPage)) return redirectById(GetCtrlWindow().g_sCurTabId);}function redirectById(sID){g_ActionFrom |= ACTION_FROM_AUTO;var TABID = top.Frame.redirectTabById(GetCtrlWindow(), sID);var oItem = MenuWindow.g_oTreeRoot.GetItem(TABID||sID);try{oItem.Expand("open",!TABID);}catch (e){return false;}return true;}function MenuInit(){if(redirectById("I_Main") === false){var firstLeaf = MenuWindow.g_oTreeRoot.GetFirstLeaf();if(firstLeaf){firstLeaf.Expand("open",true);}}}function showWaitBox(){}function KeepAlive(win){var seleAllUrl = "/wcn/keepalive/keepalive?uid="+WnmGetUID();	if ( !win ){win = top.winKeepAlive;}win.location = seleAllUrl;}function ShowServerError(nCode){if ( top.isLogout ){return true;}top.isLogout=true;var nActionType = parseInt(nCode/10000);var nResId = nCode%10000;try{if(nResId > 0){var sRes = eval("RS_MSG_STRING_"+nResId);alert(sRes);}switch(nActionType){case 1: history.back();break;case 2: top.location ='/';break;}return true;}catch( ee ){alert("Error: " + nResId);return false;}}var oselsrczone = null;var oseldstzone = null;function WnmVIDNotifyOomAcl(nOldId, nId){if(nOldId == nId){return;}top.oselsrczone = null;top.oseldstzone = null;}function CVirtualDevice(){this.sID = 1;this.sName = "Root";this.sUserVDID = 1;   this.sUserVDName = "Root";}var g_oVirDev = new CVirtualDevice();var g_pfnCallbackNofiy = [WnmVIDNotifyOomAcl];function WnmGetVID(){return g_oVirDev.sID;}function WnmGetUserVID(){return g_oVirDev.sUserVDID;}function WnmSetUserVirtualDevice(sId, sName){g_oVirDev.sUserVDID = (null != sId) ? sId : "1" ;g_oVirDev.sUserVDName = (null != sName) ? sName : "Root";}function WnmSetVirtualDevice(sId, sName){var nOldId = g_oVirDev.sID;g_oVirDev.sID = (null != sId) ? sId : "1" ;g_oVirDev.sName = (null != sName) ? sName : "Root";for(var i=0; i<g_pfnCallbackNofiy.length; i++){g_pfnCallbackNofiy[i](nOldId, g_oVirDev.sID);}}function SetMenuPath(sMenuPath){var oMenuPathArea = document.getElementById("MenuPath");if(null == oMenuPathArea){alert("oMenuPathArea is null");return false;}if (null == sMenuPath){sMenuPath = "";}oMenuPathArea.innerHTML = sMenuPath;return true;}function WnmGetVName(){return g_oVirDev.sName;}function CAspfVar(){this.aspf_oselsrczone = "";this.aspf_oseldstzone = "";this.aspf_zonechange = "";this.aspf_srczonename = "";this.aspf_dstzonename = "";}var g_aspfvar = new CAspfVar();g_aspfvar.aspf_oselsrczone = 0xFFFFFFFF;g_aspfvar.aspf_oseldstzone = 0xFFFFFFFF;g_aspfvar.aspf_zonechange = 3;g_aspfvar.aspf_srczonename = "All zones";g_aspfvar.aspf_dstzonename = "All zones";function CFilterVar(){this.filter_oselsrczone = "";this.filter_oseldstzone = "";this.filter_zonechange = "";this.filter_srczonename = "";this.filter_dstzonename = "";}var g_filtervar = new CFilterVar();g_filtervar.filter_oselsrczone = 0xFFFFFFFF;g_filtervar.filter_oseldstzone = 0xFFFFFFFF;g_filtervar.filter_zonechange = 3;g_filtervar.filter_srczonename = "All zones";g_filtervar.filter_dstzonename = "All zones";var nLogTimeout = "0";function CSessionlogVar(){this.sessionlog_oselsrczone = "";this.sessionlog_oseldstzone = "";this.sessionlog_zonechange = "";this.sessionlog_srczonename = "";this.sessionlog_dstzonename = "";}var g_sessionlogvar = new CSessionlogVar();g_sessionlogvar.sessionlog_oselsrczone = 0xFFFFFFFF;g_sessionlogvar.sessionlog_oseldstzone = 0xFFFFFFFF;g_sessionlogvar.sessionlog_zonechange = 3;g_sessionlogvar.sessionlog_srczonename = "All zones";g_sessionlogvar.sessionlog_dstzonename = "All zones";   function CheckSupportFlag(flag){return flag}function CheckIsForbidModifyLinkAgg(){return false;}var bSyslogSeqDisp = false;var g_onTabItemChanging = true;function WinAppendOptions(win, oSelect, sOptionArr, nFrom, nTo, nStep, nCurValue){var bSelected;var nRet = 0;if ( null==nStep ){nStep = 1;}nFrom = parseInt(nFrom);nTo = parseInt(nTo);nStep = parseInt(nStep);nCurValue = parseInt(nCurValue);if ( sOptionArr==null || sOptionArr.length==0 ){for ( i=nFrom; i<=nTo; i+=nStep ){var oOption = win.document.createElement("OPTION");oOption.value = i;oOption.text = i;oOption.selected = (i==nCurValue);try{oSelect.add(oOption);}				catch ( e ){oSelect.add(oOption,null);}	nRet ++;}}else{var k=0;for ( i=nFrom; i<=nTo; i+=nStep ){var n = parseInt(sOptionArr[k]);var sText = (n==i) ? sOptionArr[k++] : i ;var oOption = win.document.createElement("OPTION");oOption.value = i;oOption.text = sText;oOption.selected = (i==nCurValue);try{oSelect.add(oOption);}				catch ( e ){oSelect.add(oOption,null);}	nRet++;}}return nRet;}top.sVlanRange = "";function showVLAN(n, sUrl){if("" == top.sVlanRange){alert(top.RS_ERR_SELVLAN_FIRST);try{top.g_onTabItemChanging = true;}catch(e){}redirectById('I_VLAN_Select');return false;}else{top.nShowVlan = n;  }var sNextPage = "";switch ( parseInt( top.nShowVlan ) ){case 1: sNextPage = "summary";  break;case 2: sNextPage = "select";break;case 3: sNextPage = "select";   break;  case 4: sNextPage = "remove";break;default:alert("showVLAN() is error!");break;}var sUrl = "/wcn/panelvlan/summary?uid="+top.WnmGetUID()+"&vrange="+top.sVlanRange+"&filehtml="+sNextPage; if ( top.localRun ){sUrl = "panelvlan/"+sNextPage + ".html";}GetCtrlWindow().location = WnmGetUrlWithUID(sUrl);return true;}function GetCtrlWindow(){if(CtrlWindow) return CtrlWindow;return top.content.mainframe;}function SetCtrlWindow(oWin){if(oWin == top.content.mainframe) CtrlWindow = null;else CtrlWindow = oWin;}var Iftype = {COMMON:             0,                                              AM:                 1,                                                       ASYNC:              2,                                              ATM_IMA:            3,                                                       ATM:                4,                                                       AUX:                5,                                                 BRI:                6,                                              BVI:                7,                                            CASCADE:            8,                                                CONSOLE:            9,                                               CPOS:               10,                                           DIALER:             11,                                           DIALER_VA:          12,                                   E1:                 13,                                             E3:                 14,                                             ETHERNET:           15,                                             GE:                 16,                                         FGE:                17,                                           HGE:                18,                                           IDS_ETHERNET:       19,                                       IDS_GE:             20,                                   IDS_XGE:            21,                                   IDS_FGE:            22,                                    IDS_HGE:            23,                                     INETH:              24, INLOOPBACK:         25,                                         ENCRYPT:            26,                                               L2ETHERNET:         27,                                         L2GE:               28,                                     L2VE:               29,                                     L2XGE:              30,                                       L2FGE:              31,                                         L2HGE:              32,                                        L3ETHERNET:         33,                                         L3GE:               34,                                     L3VE:               35,                                     L3XGE:              36,                                       L3FGE:              37,                                         L3HGE:              38,                                        LOGICTUNNEL:        39,                                         LOOPBACK:           40,                                       ME:                 41,                                           MFR:                42,                                             MGE:                43,                                       MPGROUP:            44,                                         NULL:               45,                                                 PA:                 46,                                           POS:                47,                                                RPR_POS:            48,                                        RPR_XGE:            49,                                       RPR_GE:             50,                                         SERIAL:             51,                                           SUBSCRIBER_LINE:    52,                                       T1:                 53,                                             T3:                 54,                                             TUNNEL:             55,                                             VA:                 56,                                               VE:                 57,                                         VLAN:               58,                                       VT:                 59,                                               XGE:                60,                                           NAT:                61,                                      EACL:               62,                                     NET_STREAM:         63,                                URPF:               64,                                     MPLS_VPLS:          65,                          MPLS_VLL:           66,                           MPLS_L3VPN:         67,                               MPLS:               68,                                 RADIO_DOT11:        69,                                       WLAN_ESS:           70,                         WLAN_DBSS:          71,                         WLAN_BSS:           72,                         WLAN_ETHERNET:      73,                         WLAN_TUNNEL:        74,                             OLT:                75,                ONU:                76,                 MTUNNEL:            77,                                     CELLULAR:           78,                                        INASYNC:            79,            L2RPR:              80,                                L3RPR:              81,                                RAGG:               82,                                         BAGG:               83,                                         WLAN_MESHLINK:      84,                              WLAN_MESH:          85,                      ECPOS:              86,                                         SSLVPN:             87,    HDLCB:              88,                             FCM:                89,                                              EFM:                90,                                              PW:                 91,                                       AC:                 92,                                       FC:                 93,                                                   VFC:                94,                                                  FCB:                95,                                            VACC:               96,                                VTER:               97                              };